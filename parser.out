Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    DBL_QT
    DIVIDE_EQ
    ENTER
    EXIT
    FALSE
    LENGTH
    LIST
    MINUS_EQ
    MOD
    NULL_TYPE
    PLUS_EQ
    PRINT
    SCAN
    SINGLE_QT
    TIMES_EQ
    TRUE

Grammar

Rule 0     S' -> prog
Rule 1     prog -> func prog
Rule 2     prog -> empty
Rule 3     func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
Rule 4     func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON
Rule 5     stmt -> expr SEMI_COLON
Rule 6     stmt -> defvar SEMI_COLON
Rule 7     stmt -> func
Rule 8     stmt -> IF LBRACKET expr RBRACKET stmt
Rule 9     stmt -> IF LBRACKET expr RBRACKET stmt ELSE stmt
Rule 10    stmt -> WHILE_LOOP LBRACKET expr RBRACKET stmt
Rule 11    stmt -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON
Rule 12    stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt
Rule 13    stmt -> BEGIN body END
Rule 14    stmt -> RETURN expr SEMI_COLON
Rule 15    expr -> expr LBRACKET expr RBRACKET
Rule 16    expr -> LBRACKET clist RBRACKET
Rule 17    expr -> expr QUESTION_MARK expr COLON expr
Rule 18    expr -> expr PLUS expr
Rule 19    expr -> expr MINUS expr
Rule 20    expr -> expr TIMES expr
Rule 21    expr -> expr DIVIDE expr
Rule 22    expr -> expr GREATER_THAN expr
Rule 23    expr -> expr LESS_THAN expr
Rule 24    expr -> expr EQUAL expr
Rule 25    expr -> expr GREATER_THAN_EQUAL expr
Rule 26    expr -> expr LESS_THAN_EQUAL expr
Rule 27    expr -> expr NOT_EQUAL expr
Rule 28    expr -> expr OR expr
Rule 29    expr -> expr AND expr
Rule 30    expr -> NOT expr
Rule 31    expr -> PLUS expr
Rule 32    expr -> MINUS expr
Rule 33    expr -> IDENTIFIER
Rule 34    expr -> IDENTIFIER ASSIGN expr
Rule 35    expr -> IDENTIFIER LPAREN clist RPAREN
Rule 36    expr -> NUMBER
Rule 37    flist -> empty
Rule 38    flist -> param_decl
Rule 39    flist -> param_decl COMMA flist
Rule 40    clist -> expr
Rule 41    clist -> expr COMMA clist
Rule 42    param_decl -> IDENTIFIER AS type
Rule 43    type -> INT_TYPE
Rule 44    type -> STR_TYPE
Rule 45    type -> VECTOR_TYPE
Rule 46    type -> BOOL_TYPE
Rule 47    body -> statement_list
Rule 48    statement_list -> statement
Rule 49    statement_list -> statement statement_list
Rule 50    statement -> expr SEMI_COLON
Rule 51    statement -> defvar SEMI_COLON
Rule 52    statement -> func
Rule 53    statement -> RETURN expr SEMI_COLON
Rule 54    statement -> IF LBRACKET expr RBRACKET stmt
Rule 55    statement -> IF LBRACKET expr RBRACKET stmt ELSE stmt
Rule 56    statement -> WHILE_LOOP LBRACKET expr RBRACKET stmt
Rule 57    statement -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON
Rule 58    statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt
Rule 59    statement -> BEGIN body END
Rule 60    defvar -> IDENTIFIER DBL_COLON type
Rule 61    defvar -> IDENTIFIER DBL_COLON type ASSIGN expr
Rule 62    empty -> <empty>

Terminals, with rules where they appear

AND                  : 29
ARROW                : 4
AS                   : 42
ASSIGN               : 12 34 58 61
BEGIN                : 13 59
BOOL_TYPE            : 46
COLON                : 17
COMMA                : 39 41
COMMENT              : 
DBL_COLON            : 60 61
DBL_QT               : 
DIVIDE               : 21
DIVIDE_EQ            : 
DO                   : 11 57
ELSE                 : 9 55
END                  : 13 59
ENTER                : 
EQUAL                : 24
EXIT                 : 
FALSE                : 
FN                   : 3 4
FOR_LOOP             : 12 58
GREATER_THAN         : 3 4 22
GREATER_THAN_EQUAL   : 25
IDENTIFIER           : 3 4 12 33 34 35 42 58 60 61
IF                   : 8 9 54 55
INT_TYPE             : 43
LBRACKET             : 8 9 10 11 15 16 54 55 56 57
LCURLYBR             : 3
LENGTH               : 
LESS_THAN            : 3 4 23
LESS_THAN_EQUAL      : 26
LIST                 : 
LPAREN               : 3 4 12 35 58
MINUS                : 19 32
MINUS_EQ             : 
MOD                  : 
NOT                  : 30
NOT_EQUAL            : 27
NULL_TYPE            : 
NUMBER               : 36
OR                   : 28
PLUS                 : 18 31
PLUS_EQ              : 
PRINT                : 
QUESTION_MARK        : 17
RBRACKET             : 8 9 10 11 15 16 54 55 56 57
RCURLYBR             : 3
RETURN               : 4 14 53
RPAREN               : 3 4 12 35 58
SCAN                 : 
SEMI_COLON           : 4 5 6 11 14 50 51 53 57
SINGLE_QT            : 
STR_TYPE             : 44
TIMES                : 20
TIMES_EQ             : 
TO                   : 12 58
TRUE                 : 
VECTOR_TYPE          : 45
WHILE_LOOP           : 10 11 56 57
error                : 

Nonterminals, with rules where they appear

body                 : 3 13 59
clist                : 16 35 41
defvar               : 6 51
empty                : 2 37
expr                 : 4 5 8 9 10 11 12 12 14 15 15 17 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 31 32 34 40 41 50 53 54 55 56 57 58 58 61
flist                : 3 4 39
func                 : 1 7 52
param_decl           : 38 39
prog                 : 1 0
statement            : 48 49
statement_list       : 47 49
stmt                 : 8 9 9 10 11 12 54 55 55 56 57 58
type                 : 3 4 42 60 61

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . func prog
    (2) prog -> . empty
    (3) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON
    (62) empty -> .

    FN              shift and go to state 4
    $end            reduce using rule 62 (empty -> .)

    prog                           shift and go to state 1
    func                           shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> prog .



state 2

    (1) prog -> func . prog
    (1) prog -> . func prog
    (2) prog -> . empty
    (3) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON
    (62) empty -> .

    FN              shift and go to state 4
    $end            reduce using rule 62 (empty -> .)

    func                           shift and go to state 2
    prog                           shift and go to state 5
    empty                          shift and go to state 3

state 3

    (2) prog -> empty .

    $end            reduce using rule 2 (prog -> empty .)


state 4

    (3) func -> FN . IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> FN . IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON

    IDENTIFIER      shift and go to state 6


state 5

    (1) prog -> func prog .

    $end            reduce using rule 1 (prog -> func prog .)


state 6

    (3) func -> FN IDENTIFIER . LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> FN IDENTIFIER . LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON

    LPAREN          shift and go to state 7


state 7

    (3) func -> FN IDENTIFIER LPAREN . flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> FN IDENTIFIER LPAREN . flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON
    (37) flist -> . empty
    (38) flist -> . param_decl
    (39) flist -> . param_decl COMMA flist
    (62) empty -> .
    (42) param_decl -> . IDENTIFIER AS type

    RPAREN          reduce using rule 62 (empty -> .)
    IDENTIFIER      shift and go to state 8

    flist                          shift and go to state 9
    empty                          shift and go to state 10
    param_decl                     shift and go to state 11

state 8

    (42) param_decl -> IDENTIFIER . AS type

    AS              shift and go to state 12


state 9

    (3) func -> FN IDENTIFIER LPAREN flist . RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> FN IDENTIFIER LPAREN flist . RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON

    RPAREN          shift and go to state 13


state 10

    (37) flist -> empty .

    RPAREN          reduce using rule 37 (flist -> empty .)


state 11

    (38) flist -> param_decl .
    (39) flist -> param_decl . COMMA flist

    RPAREN          reduce using rule 38 (flist -> param_decl .)
    COMMA           shift and go to state 14


state 12

    (42) param_decl -> IDENTIFIER AS . type
    (43) type -> . INT_TYPE
    (44) type -> . STR_TYPE
    (45) type -> . VECTOR_TYPE
    (46) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 16
    STR_TYPE        shift and go to state 17
    VECTOR_TYPE     shift and go to state 18
    BOOL_TYPE       shift and go to state 19

    type                           shift and go to state 15

state 13

    (3) func -> FN IDENTIFIER LPAREN flist RPAREN . LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> FN IDENTIFIER LPAREN flist RPAREN . LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON

    LESS_THAN       shift and go to state 20


state 14

    (39) flist -> param_decl COMMA . flist
    (37) flist -> . empty
    (38) flist -> . param_decl
    (39) flist -> . param_decl COMMA flist
    (62) empty -> .
    (42) param_decl -> . IDENTIFIER AS type

    RPAREN          reduce using rule 62 (empty -> .)
    IDENTIFIER      shift and go to state 8

    param_decl                     shift and go to state 11
    flist                          shift and go to state 21
    empty                          shift and go to state 10

state 15

    (42) param_decl -> IDENTIFIER AS type .

    COMMA           reduce using rule 42 (param_decl -> IDENTIFIER AS type .)
    RPAREN          reduce using rule 42 (param_decl -> IDENTIFIER AS type .)


state 16

    (43) type -> INT_TYPE .

    COMMA           reduce using rule 43 (type -> INT_TYPE .)
    RPAREN          reduce using rule 43 (type -> INT_TYPE .)
    GREATER_THAN    reduce using rule 43 (type -> INT_TYPE .)
    ASSIGN          reduce using rule 43 (type -> INT_TYPE .)
    SEMI_COLON      reduce using rule 43 (type -> INT_TYPE .)


state 17

    (44) type -> STR_TYPE .

    COMMA           reduce using rule 44 (type -> STR_TYPE .)
    RPAREN          reduce using rule 44 (type -> STR_TYPE .)
    GREATER_THAN    reduce using rule 44 (type -> STR_TYPE .)
    ASSIGN          reduce using rule 44 (type -> STR_TYPE .)
    SEMI_COLON      reduce using rule 44 (type -> STR_TYPE .)


state 18

    (45) type -> VECTOR_TYPE .

    COMMA           reduce using rule 45 (type -> VECTOR_TYPE .)
    RPAREN          reduce using rule 45 (type -> VECTOR_TYPE .)
    GREATER_THAN    reduce using rule 45 (type -> VECTOR_TYPE .)
    ASSIGN          reduce using rule 45 (type -> VECTOR_TYPE .)
    SEMI_COLON      reduce using rule 45 (type -> VECTOR_TYPE .)


state 19

    (46) type -> BOOL_TYPE .

    COMMA           reduce using rule 46 (type -> BOOL_TYPE .)
    RPAREN          reduce using rule 46 (type -> BOOL_TYPE .)
    GREATER_THAN    reduce using rule 46 (type -> BOOL_TYPE .)
    ASSIGN          reduce using rule 46 (type -> BOOL_TYPE .)
    SEMI_COLON      reduce using rule 46 (type -> BOOL_TYPE .)


state 20

    (3) func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN . type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN . type GREATER_THAN ARROW RETURN expr SEMI_COLON
    (43) type -> . INT_TYPE
    (44) type -> . STR_TYPE
    (45) type -> . VECTOR_TYPE
    (46) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 16
    STR_TYPE        shift and go to state 17
    VECTOR_TYPE     shift and go to state 18
    BOOL_TYPE       shift and go to state 19

    type                           shift and go to state 22

state 21

    (39) flist -> param_decl COMMA flist .

    RPAREN          reduce using rule 39 (flist -> param_decl COMMA flist .)


state 22

    (3) func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type . GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type . GREATER_THAN ARROW RETURN expr SEMI_COLON

    GREATER_THAN    shift and go to state 23


state 23

    (3) func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN . LCURLYBR body RCURLYBR
    (4) func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN . ARROW RETURN expr SEMI_COLON

    LCURLYBR        shift and go to state 24
    ARROW           shift and go to state 25


state 24

    (3) func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR . body RCURLYBR
    (47) body -> . statement_list
    (48) statement_list -> . statement
    (49) statement_list -> . statement statement_list
    (50) statement -> . expr SEMI_COLON
    (51) statement -> . defvar SEMI_COLON
    (52) statement -> . func
    (53) statement -> . RETURN expr SEMI_COLON
    (54) statement -> . IF LBRACKET expr RBRACKET stmt
    (55) statement -> . IF LBRACKET expr RBRACKET stmt ELSE stmt
    (56) statement -> . WHILE_LOOP LBRACKET expr RBRACKET stmt
    (57) statement -> . DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON
    (58) statement -> . FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt
    (59) statement -> . BEGIN body END
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER
    (60) defvar -> . IDENTIFIER DBL_COLON type
    (61) defvar -> . IDENTIFIER DBL_COLON type ASSIGN expr
    (3) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON

    RETURN          shift and go to state 33
    IF              shift and go to state 34
    WHILE_LOOP      shift and go to state 36
    DO              shift and go to state 37
    FOR_LOOP        shift and go to state 38
    BEGIN           shift and go to state 39
    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 43
    FN              shift and go to state 4

    body                           shift and go to state 27
    statement_list                 shift and go to state 28
    statement                      shift and go to state 29
    expr                           shift and go to state 30
    defvar                         shift and go to state 31
    func                           shift and go to state 32

state 25

    (4) func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW . RETURN expr SEMI_COLON

    RETURN          shift and go to state 44


state 26

    (33) expr -> IDENTIFIER .
    (34) expr -> IDENTIFIER . ASSIGN expr
    (35) expr -> IDENTIFIER . LPAREN clist RPAREN
    (60) defvar -> IDENTIFIER . DBL_COLON type
    (61) defvar -> IDENTIFIER . DBL_COLON type ASSIGN expr

    SEMI_COLON      reduce using rule 33 (expr -> IDENTIFIER .)
    LBRACKET        reduce using rule 33 (expr -> IDENTIFIER .)
    QUESTION_MARK   reduce using rule 33 (expr -> IDENTIFIER .)
    PLUS            reduce using rule 33 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 33 (expr -> IDENTIFIER .)
    TIMES           reduce using rule 33 (expr -> IDENTIFIER .)
    DIVIDE          reduce using rule 33 (expr -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 33 (expr -> IDENTIFIER .)
    LESS_THAN       reduce using rule 33 (expr -> IDENTIFIER .)
    EQUAL           reduce using rule 33 (expr -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 33 (expr -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 33 (expr -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 33 (expr -> IDENTIFIER .)
    OR              reduce using rule 33 (expr -> IDENTIFIER .)
    AND             reduce using rule 33 (expr -> IDENTIFIER .)
    ASSIGN          shift and go to state 45
    LPAREN          shift and go to state 46
    DBL_COLON       shift and go to state 47


state 27

    (3) func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body . RCURLYBR

    RCURLYBR        shift and go to state 48


state 28

    (47) body -> statement_list .

    RCURLYBR        reduce using rule 47 (body -> statement_list .)
    END             reduce using rule 47 (body -> statement_list .)


state 29

    (48) statement_list -> statement .
    (49) statement_list -> statement . statement_list
    (48) statement_list -> . statement
    (49) statement_list -> . statement statement_list
    (50) statement -> . expr SEMI_COLON
    (51) statement -> . defvar SEMI_COLON
    (52) statement -> . func
    (53) statement -> . RETURN expr SEMI_COLON
    (54) statement -> . IF LBRACKET expr RBRACKET stmt
    (55) statement -> . IF LBRACKET expr RBRACKET stmt ELSE stmt
    (56) statement -> . WHILE_LOOP LBRACKET expr RBRACKET stmt
    (57) statement -> . DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON
    (58) statement -> . FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt
    (59) statement -> . BEGIN body END
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER
    (60) defvar -> . IDENTIFIER DBL_COLON type
    (61) defvar -> . IDENTIFIER DBL_COLON type ASSIGN expr
    (3) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON

    RCURLYBR        reduce using rule 48 (statement_list -> statement .)
    END             reduce using rule 48 (statement_list -> statement .)
    RETURN          shift and go to state 33
    IF              shift and go to state 34
    WHILE_LOOP      shift and go to state 36
    DO              shift and go to state 37
    FOR_LOOP        shift and go to state 38
    BEGIN           shift and go to state 39
    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 43
    FN              shift and go to state 4

    statement                      shift and go to state 29
    statement_list                 shift and go to state 49
    expr                           shift and go to state 30
    defvar                         shift and go to state 31
    func                           shift and go to state 32

state 30

    (50) statement -> expr . SEMI_COLON
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

    SEMI_COLON      shift and go to state 50
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 31

    (51) statement -> defvar . SEMI_COLON

    SEMI_COLON      shift and go to state 65


state 32

    (52) statement -> func .

    RETURN          reduce using rule 52 (statement -> func .)
    IF              reduce using rule 52 (statement -> func .)
    WHILE_LOOP      reduce using rule 52 (statement -> func .)
    DO              reduce using rule 52 (statement -> func .)
    FOR_LOOP        reduce using rule 52 (statement -> func .)
    BEGIN           reduce using rule 52 (statement -> func .)
    LBRACKET        reduce using rule 52 (statement -> func .)
    NOT             reduce using rule 52 (statement -> func .)
    PLUS            reduce using rule 52 (statement -> func .)
    MINUS           reduce using rule 52 (statement -> func .)
    IDENTIFIER      reduce using rule 52 (statement -> func .)
    NUMBER          reduce using rule 52 (statement -> func .)
    FN              reduce using rule 52 (statement -> func .)
    RCURLYBR        reduce using rule 52 (statement -> func .)
    END             reduce using rule 52 (statement -> func .)


state 33

    (53) statement -> RETURN . expr SEMI_COLON
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 66

state 34

    (54) statement -> IF . LBRACKET expr RBRACKET stmt
    (55) statement -> IF . LBRACKET expr RBRACKET stmt ELSE stmt

    LBRACKET        shift and go to state 68


state 35

    (16) expr -> LBRACKET . clist RBRACKET
    (40) clist -> . expr
    (41) clist -> . expr COMMA clist
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    clist                          shift and go to state 69
    expr                           shift and go to state 70

state 36

    (56) statement -> WHILE_LOOP . LBRACKET expr RBRACKET stmt

    LBRACKET        shift and go to state 71


state 37

    (57) statement -> DO . stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON
    (5) stmt -> . expr SEMI_COLON
    (6) stmt -> . defvar SEMI_COLON
    (7) stmt -> . func
    (8) stmt -> . IF LBRACKET expr RBRACKET stmt
    (9) stmt -> . IF LBRACKET expr RBRACKET stmt ELSE stmt
    (10) stmt -> . WHILE_LOOP LBRACKET expr RBRACKET stmt
    (11) stmt -> . DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON
    (12) stmt -> . FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt
    (13) stmt -> . BEGIN body END
    (14) stmt -> . RETURN expr SEMI_COLON
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER
    (60) defvar -> . IDENTIFIER DBL_COLON type
    (61) defvar -> . IDENTIFIER DBL_COLON type ASSIGN expr
    (3) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON

    IF              shift and go to state 78
    WHILE_LOOP      shift and go to state 74
    DO              shift and go to state 72
    FOR_LOOP        shift and go to state 79
    BEGIN           shift and go to state 80
    RETURN          shift and go to state 81
    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 43
    FN              shift and go to state 4

    stmt                           shift and go to state 73
    expr                           shift and go to state 75
    defvar                         shift and go to state 76
    func                           shift and go to state 77

state 38

    (58) statement -> FOR_LOOP . LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt

    LPAREN          shift and go to state 82


state 39

    (59) statement -> BEGIN . body END
    (47) body -> . statement_list
    (48) statement_list -> . statement
    (49) statement_list -> . statement statement_list
    (50) statement -> . expr SEMI_COLON
    (51) statement -> . defvar SEMI_COLON
    (52) statement -> . func
    (53) statement -> . RETURN expr SEMI_COLON
    (54) statement -> . IF LBRACKET expr RBRACKET stmt
    (55) statement -> . IF LBRACKET expr RBRACKET stmt ELSE stmt
    (56) statement -> . WHILE_LOOP LBRACKET expr RBRACKET stmt
    (57) statement -> . DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON
    (58) statement -> . FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt
    (59) statement -> . BEGIN body END
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER
    (60) defvar -> . IDENTIFIER DBL_COLON type
    (61) defvar -> . IDENTIFIER DBL_COLON type ASSIGN expr
    (3) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON

    RETURN          shift and go to state 33
    IF              shift and go to state 34
    WHILE_LOOP      shift and go to state 36
    DO              shift and go to state 37
    FOR_LOOP        shift and go to state 38
    BEGIN           shift and go to state 39
    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 43
    FN              shift and go to state 4

    body                           shift and go to state 83
    statement_list                 shift and go to state 28
    statement                      shift and go to state 29
    expr                           shift and go to state 30
    defvar                         shift and go to state 31
    func                           shift and go to state 32

state 40

    (31) expr -> PLUS . expr
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 84

state 41

    (32) expr -> MINUS . expr
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 85

state 42

    (30) expr -> NOT . expr
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 86

state 43

    (36) expr -> NUMBER .

    SEMI_COLON      reduce using rule 36 (expr -> NUMBER .)
    LBRACKET        reduce using rule 36 (expr -> NUMBER .)
    QUESTION_MARK   reduce using rule 36 (expr -> NUMBER .)
    PLUS            reduce using rule 36 (expr -> NUMBER .)
    MINUS           reduce using rule 36 (expr -> NUMBER .)
    TIMES           reduce using rule 36 (expr -> NUMBER .)
    DIVIDE          reduce using rule 36 (expr -> NUMBER .)
    GREATER_THAN    reduce using rule 36 (expr -> NUMBER .)
    LESS_THAN       reduce using rule 36 (expr -> NUMBER .)
    EQUAL           reduce using rule 36 (expr -> NUMBER .)
    GREATER_THAN_EQUAL reduce using rule 36 (expr -> NUMBER .)
    LESS_THAN_EQUAL reduce using rule 36 (expr -> NUMBER .)
    NOT_EQUAL       reduce using rule 36 (expr -> NUMBER .)
    OR              reduce using rule 36 (expr -> NUMBER .)
    AND             reduce using rule 36 (expr -> NUMBER .)
    COMMA           reduce using rule 36 (expr -> NUMBER .)
    RBRACKET        reduce using rule 36 (expr -> NUMBER .)
    RPAREN          reduce using rule 36 (expr -> NUMBER .)
    COLON           reduce using rule 36 (expr -> NUMBER .)
    TO              reduce using rule 36 (expr -> NUMBER .)


state 44

    (4) func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN . expr SEMI_COLON
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 87

state 45

    (34) expr -> IDENTIFIER ASSIGN . expr
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 88

state 46

    (35) expr -> IDENTIFIER LPAREN . clist RPAREN
    (40) clist -> . expr
    (41) clist -> . expr COMMA clist
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    clist                          shift and go to state 89
    expr                           shift and go to state 70

state 47

    (60) defvar -> IDENTIFIER DBL_COLON . type
    (61) defvar -> IDENTIFIER DBL_COLON . type ASSIGN expr
    (43) type -> . INT_TYPE
    (44) type -> . STR_TYPE
    (45) type -> . VECTOR_TYPE
    (46) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 16
    STR_TYPE        shift and go to state 17
    VECTOR_TYPE     shift and go to state 18
    BOOL_TYPE       shift and go to state 19

    type                           shift and go to state 90

state 48

    (3) func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR .

    FN              reduce using rule 3 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR .)
    $end            reduce using rule 3 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR .)
    RETURN          reduce using rule 3 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR .)
    IF              reduce using rule 3 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR .)
    WHILE_LOOP      reduce using rule 3 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR .)
    DO              reduce using rule 3 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR .)
    FOR_LOOP        reduce using rule 3 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR .)
    BEGIN           reduce using rule 3 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR .)
    LBRACKET        reduce using rule 3 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR .)
    NOT             reduce using rule 3 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR .)
    PLUS            reduce using rule 3 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR .)
    MINUS           reduce using rule 3 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR .)
    IDENTIFIER      reduce using rule 3 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR .)
    NUMBER          reduce using rule 3 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR .)
    RCURLYBR        reduce using rule 3 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR .)
    END             reduce using rule 3 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR .)
    ELSE            reduce using rule 3 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR .)


state 49

    (49) statement_list -> statement statement_list .

    RCURLYBR        reduce using rule 49 (statement_list -> statement statement_list .)
    END             reduce using rule 49 (statement_list -> statement statement_list .)


state 50

    (50) statement -> expr SEMI_COLON .

    RETURN          reduce using rule 50 (statement -> expr SEMI_COLON .)
    IF              reduce using rule 50 (statement -> expr SEMI_COLON .)
    WHILE_LOOP      reduce using rule 50 (statement -> expr SEMI_COLON .)
    DO              reduce using rule 50 (statement -> expr SEMI_COLON .)
    FOR_LOOP        reduce using rule 50 (statement -> expr SEMI_COLON .)
    BEGIN           reduce using rule 50 (statement -> expr SEMI_COLON .)
    LBRACKET        reduce using rule 50 (statement -> expr SEMI_COLON .)
    NOT             reduce using rule 50 (statement -> expr SEMI_COLON .)
    PLUS            reduce using rule 50 (statement -> expr SEMI_COLON .)
    MINUS           reduce using rule 50 (statement -> expr SEMI_COLON .)
    IDENTIFIER      reduce using rule 50 (statement -> expr SEMI_COLON .)
    NUMBER          reduce using rule 50 (statement -> expr SEMI_COLON .)
    FN              reduce using rule 50 (statement -> expr SEMI_COLON .)
    RCURLYBR        reduce using rule 50 (statement -> expr SEMI_COLON .)
    END             reduce using rule 50 (statement -> expr SEMI_COLON .)


state 51

    (15) expr -> expr LBRACKET . expr RBRACKET
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 91

state 52

    (17) expr -> expr QUESTION_MARK . expr COLON expr
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 92

state 53

    (18) expr -> expr PLUS . expr
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 93

state 54

    (19) expr -> expr MINUS . expr
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 94

state 55

    (20) expr -> expr TIMES . expr
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 95

state 56

    (21) expr -> expr DIVIDE . expr
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 96

state 57

    (22) expr -> expr GREATER_THAN . expr
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 97

state 58

    (23) expr -> expr LESS_THAN . expr
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 98

state 59

    (24) expr -> expr EQUAL . expr
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 99

state 60

    (25) expr -> expr GREATER_THAN_EQUAL . expr
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 100

state 61

    (26) expr -> expr LESS_THAN_EQUAL . expr
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 101

state 62

    (27) expr -> expr NOT_EQUAL . expr
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 102

state 63

    (28) expr -> expr OR . expr
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 103

state 64

    (29) expr -> expr AND . expr
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 104

state 65

    (51) statement -> defvar SEMI_COLON .

    RETURN          reduce using rule 51 (statement -> defvar SEMI_COLON .)
    IF              reduce using rule 51 (statement -> defvar SEMI_COLON .)
    WHILE_LOOP      reduce using rule 51 (statement -> defvar SEMI_COLON .)
    DO              reduce using rule 51 (statement -> defvar SEMI_COLON .)
    FOR_LOOP        reduce using rule 51 (statement -> defvar SEMI_COLON .)
    BEGIN           reduce using rule 51 (statement -> defvar SEMI_COLON .)
    LBRACKET        reduce using rule 51 (statement -> defvar SEMI_COLON .)
    NOT             reduce using rule 51 (statement -> defvar SEMI_COLON .)
    PLUS            reduce using rule 51 (statement -> defvar SEMI_COLON .)
    MINUS           reduce using rule 51 (statement -> defvar SEMI_COLON .)
    IDENTIFIER      reduce using rule 51 (statement -> defvar SEMI_COLON .)
    NUMBER          reduce using rule 51 (statement -> defvar SEMI_COLON .)
    FN              reduce using rule 51 (statement -> defvar SEMI_COLON .)
    RCURLYBR        reduce using rule 51 (statement -> defvar SEMI_COLON .)
    END             reduce using rule 51 (statement -> defvar SEMI_COLON .)


state 66

    (53) statement -> RETURN expr . SEMI_COLON
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

    SEMI_COLON      shift and go to state 105
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 67

    (33) expr -> IDENTIFIER .
    (34) expr -> IDENTIFIER . ASSIGN expr
    (35) expr -> IDENTIFIER . LPAREN clist RPAREN

    SEMI_COLON      reduce using rule 33 (expr -> IDENTIFIER .)
    LBRACKET        reduce using rule 33 (expr -> IDENTIFIER .)
    QUESTION_MARK   reduce using rule 33 (expr -> IDENTIFIER .)
    PLUS            reduce using rule 33 (expr -> IDENTIFIER .)
    MINUS           reduce using rule 33 (expr -> IDENTIFIER .)
    TIMES           reduce using rule 33 (expr -> IDENTIFIER .)
    DIVIDE          reduce using rule 33 (expr -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 33 (expr -> IDENTIFIER .)
    LESS_THAN       reduce using rule 33 (expr -> IDENTIFIER .)
    EQUAL           reduce using rule 33 (expr -> IDENTIFIER .)
    GREATER_THAN_EQUAL reduce using rule 33 (expr -> IDENTIFIER .)
    LESS_THAN_EQUAL reduce using rule 33 (expr -> IDENTIFIER .)
    NOT_EQUAL       reduce using rule 33 (expr -> IDENTIFIER .)
    OR              reduce using rule 33 (expr -> IDENTIFIER .)
    AND             reduce using rule 33 (expr -> IDENTIFIER .)
    COMMA           reduce using rule 33 (expr -> IDENTIFIER .)
    RBRACKET        reduce using rule 33 (expr -> IDENTIFIER .)
    RPAREN          reduce using rule 33 (expr -> IDENTIFIER .)
    COLON           reduce using rule 33 (expr -> IDENTIFIER .)
    TO              reduce using rule 33 (expr -> IDENTIFIER .)
    ASSIGN          shift and go to state 45
    LPAREN          shift and go to state 46


state 68

    (54) statement -> IF LBRACKET . expr RBRACKET stmt
    (55) statement -> IF LBRACKET . expr RBRACKET stmt ELSE stmt
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 106

state 69

    (16) expr -> LBRACKET clist . RBRACKET

    RBRACKET        shift and go to state 107


state 70

    (40) clist -> expr .
    (41) clist -> expr . COMMA clist
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

    RBRACKET        reduce using rule 40 (clist -> expr .)
    RPAREN          reduce using rule 40 (clist -> expr .)
    COMMA           shift and go to state 108
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 71

    (56) statement -> WHILE_LOOP LBRACKET . expr RBRACKET stmt
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 109

state 72

    (11) stmt -> DO . stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON
    (5) stmt -> . expr SEMI_COLON
    (6) stmt -> . defvar SEMI_COLON
    (7) stmt -> . func
    (8) stmt -> . IF LBRACKET expr RBRACKET stmt
    (9) stmt -> . IF LBRACKET expr RBRACKET stmt ELSE stmt
    (10) stmt -> . WHILE_LOOP LBRACKET expr RBRACKET stmt
    (11) stmt -> . DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON
    (12) stmt -> . FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt
    (13) stmt -> . BEGIN body END
    (14) stmt -> . RETURN expr SEMI_COLON
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER
    (60) defvar -> . IDENTIFIER DBL_COLON type
    (61) defvar -> . IDENTIFIER DBL_COLON type ASSIGN expr
    (3) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON

    IF              shift and go to state 78
    WHILE_LOOP      shift and go to state 74
    DO              shift and go to state 72
    FOR_LOOP        shift and go to state 79
    BEGIN           shift and go to state 80
    RETURN          shift and go to state 81
    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 43
    FN              shift and go to state 4

    stmt                           shift and go to state 110
    expr                           shift and go to state 75
    defvar                         shift and go to state 76
    func                           shift and go to state 77

state 73

    (57) statement -> DO stmt . WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON

    WHILE_LOOP      shift and go to state 111


state 74

    (10) stmt -> WHILE_LOOP . LBRACKET expr RBRACKET stmt

    LBRACKET        shift and go to state 112


state 75

    (5) stmt -> expr . SEMI_COLON
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

    SEMI_COLON      shift and go to state 113
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 76

    (6) stmt -> defvar . SEMI_COLON

    SEMI_COLON      shift and go to state 114


state 77

    (7) stmt -> func .

    WHILE_LOOP      reduce using rule 7 (stmt -> func .)
    ELSE            reduce using rule 7 (stmt -> func .)
    RETURN          reduce using rule 7 (stmt -> func .)
    IF              reduce using rule 7 (stmt -> func .)
    DO              reduce using rule 7 (stmt -> func .)
    FOR_LOOP        reduce using rule 7 (stmt -> func .)
    BEGIN           reduce using rule 7 (stmt -> func .)
    LBRACKET        reduce using rule 7 (stmt -> func .)
    NOT             reduce using rule 7 (stmt -> func .)
    PLUS            reduce using rule 7 (stmt -> func .)
    MINUS           reduce using rule 7 (stmt -> func .)
    IDENTIFIER      reduce using rule 7 (stmt -> func .)
    NUMBER          reduce using rule 7 (stmt -> func .)
    FN              reduce using rule 7 (stmt -> func .)
    RCURLYBR        reduce using rule 7 (stmt -> func .)
    END             reduce using rule 7 (stmt -> func .)


state 78

    (8) stmt -> IF . LBRACKET expr RBRACKET stmt
    (9) stmt -> IF . LBRACKET expr RBRACKET stmt ELSE stmt

    LBRACKET        shift and go to state 115


state 79

    (12) stmt -> FOR_LOOP . LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt

    LPAREN          shift and go to state 116


state 80

    (13) stmt -> BEGIN . body END
    (47) body -> . statement_list
    (48) statement_list -> . statement
    (49) statement_list -> . statement statement_list
    (50) statement -> . expr SEMI_COLON
    (51) statement -> . defvar SEMI_COLON
    (52) statement -> . func
    (53) statement -> . RETURN expr SEMI_COLON
    (54) statement -> . IF LBRACKET expr RBRACKET stmt
    (55) statement -> . IF LBRACKET expr RBRACKET stmt ELSE stmt
    (56) statement -> . WHILE_LOOP LBRACKET expr RBRACKET stmt
    (57) statement -> . DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON
    (58) statement -> . FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt
    (59) statement -> . BEGIN body END
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER
    (60) defvar -> . IDENTIFIER DBL_COLON type
    (61) defvar -> . IDENTIFIER DBL_COLON type ASSIGN expr
    (3) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON

    RETURN          shift and go to state 33
    IF              shift and go to state 34
    WHILE_LOOP      shift and go to state 36
    DO              shift and go to state 37
    FOR_LOOP        shift and go to state 38
    BEGIN           shift and go to state 39
    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 43
    FN              shift and go to state 4

    body                           shift and go to state 117
    statement_list                 shift and go to state 28
    statement                      shift and go to state 29
    expr                           shift and go to state 30
    defvar                         shift and go to state 31
    func                           shift and go to state 32

state 81

    (14) stmt -> RETURN . expr SEMI_COLON
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 118

state 82

    (58) statement -> FOR_LOOP LPAREN . IDENTIFIER ASSIGN expr TO expr RPAREN stmt

    IDENTIFIER      shift and go to state 119


state 83

    (59) statement -> BEGIN body . END

    END             shift and go to state 120


state 84

    (31) expr -> PLUS expr .
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 31 (expr -> PLUS expr .)
    COMMA           reduce using rule 31 (expr -> PLUS expr .)
    RBRACKET        reduce using rule 31 (expr -> PLUS expr .)
    RPAREN          reduce using rule 31 (expr -> PLUS expr .)
    COLON           reduce using rule 31 (expr -> PLUS expr .)
    TO              reduce using rule 31 (expr -> PLUS expr .)
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64

  ! LBRACKET        [ reduce using rule 31 (expr -> PLUS expr .) ]
  ! QUESTION_MARK   [ reduce using rule 31 (expr -> PLUS expr .) ]
  ! PLUS            [ reduce using rule 31 (expr -> PLUS expr .) ]
  ! MINUS           [ reduce using rule 31 (expr -> PLUS expr .) ]
  ! TIMES           [ reduce using rule 31 (expr -> PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 31 (expr -> PLUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 31 (expr -> PLUS expr .) ]
  ! LESS_THAN       [ reduce using rule 31 (expr -> PLUS expr .) ]
  ! EQUAL           [ reduce using rule 31 (expr -> PLUS expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 31 (expr -> PLUS expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 31 (expr -> PLUS expr .) ]
  ! NOT_EQUAL       [ reduce using rule 31 (expr -> PLUS expr .) ]
  ! OR              [ reduce using rule 31 (expr -> PLUS expr .) ]
  ! AND             [ reduce using rule 31 (expr -> PLUS expr .) ]


state 85

    (32) expr -> MINUS expr .
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 32 (expr -> MINUS expr .)
    COMMA           reduce using rule 32 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 32 (expr -> MINUS expr .)
    RPAREN          reduce using rule 32 (expr -> MINUS expr .)
    COLON           reduce using rule 32 (expr -> MINUS expr .)
    TO              reduce using rule 32 (expr -> MINUS expr .)
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64

  ! LBRACKET        [ reduce using rule 32 (expr -> MINUS expr .) ]
  ! QUESTION_MARK   [ reduce using rule 32 (expr -> MINUS expr .) ]
  ! PLUS            [ reduce using rule 32 (expr -> MINUS expr .) ]
  ! MINUS           [ reduce using rule 32 (expr -> MINUS expr .) ]
  ! TIMES           [ reduce using rule 32 (expr -> MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 32 (expr -> MINUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 32 (expr -> MINUS expr .) ]
  ! LESS_THAN       [ reduce using rule 32 (expr -> MINUS expr .) ]
  ! EQUAL           [ reduce using rule 32 (expr -> MINUS expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 32 (expr -> MINUS expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 32 (expr -> MINUS expr .) ]
  ! NOT_EQUAL       [ reduce using rule 32 (expr -> MINUS expr .) ]
  ! OR              [ reduce using rule 32 (expr -> MINUS expr .) ]
  ! AND             [ reduce using rule 32 (expr -> MINUS expr .) ]


state 86

    (30) expr -> NOT expr .
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 30 (expr -> NOT expr .)
    COMMA           reduce using rule 30 (expr -> NOT expr .)
    RBRACKET        reduce using rule 30 (expr -> NOT expr .)
    RPAREN          reduce using rule 30 (expr -> NOT expr .)
    COLON           reduce using rule 30 (expr -> NOT expr .)
    TO              reduce using rule 30 (expr -> NOT expr .)
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64

  ! LBRACKET        [ reduce using rule 30 (expr -> NOT expr .) ]
  ! QUESTION_MARK   [ reduce using rule 30 (expr -> NOT expr .) ]
  ! PLUS            [ reduce using rule 30 (expr -> NOT expr .) ]
  ! MINUS           [ reduce using rule 30 (expr -> NOT expr .) ]
  ! TIMES           [ reduce using rule 30 (expr -> NOT expr .) ]
  ! DIVIDE          [ reduce using rule 30 (expr -> NOT expr .) ]
  ! GREATER_THAN    [ reduce using rule 30 (expr -> NOT expr .) ]
  ! LESS_THAN       [ reduce using rule 30 (expr -> NOT expr .) ]
  ! EQUAL           [ reduce using rule 30 (expr -> NOT expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 30 (expr -> NOT expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 30 (expr -> NOT expr .) ]
  ! NOT_EQUAL       [ reduce using rule 30 (expr -> NOT expr .) ]
  ! OR              [ reduce using rule 30 (expr -> NOT expr .) ]
  ! AND             [ reduce using rule 30 (expr -> NOT expr .) ]


state 87

    (4) func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr . SEMI_COLON
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

    SEMI_COLON      shift and go to state 121
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 88

    (34) expr -> IDENTIFIER ASSIGN expr .
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 34 (expr -> IDENTIFIER ASSIGN expr .)
    COMMA           reduce using rule 34 (expr -> IDENTIFIER ASSIGN expr .)
    RBRACKET        reduce using rule 34 (expr -> IDENTIFIER ASSIGN expr .)
    RPAREN          reduce using rule 34 (expr -> IDENTIFIER ASSIGN expr .)
    COLON           reduce using rule 34 (expr -> IDENTIFIER ASSIGN expr .)
    TO              reduce using rule 34 (expr -> IDENTIFIER ASSIGN expr .)
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64

  ! LBRACKET        [ reduce using rule 34 (expr -> IDENTIFIER ASSIGN expr .) ]
  ! QUESTION_MARK   [ reduce using rule 34 (expr -> IDENTIFIER ASSIGN expr .) ]
  ! PLUS            [ reduce using rule 34 (expr -> IDENTIFIER ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 34 (expr -> IDENTIFIER ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 34 (expr -> IDENTIFIER ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 34 (expr -> IDENTIFIER ASSIGN expr .) ]
  ! GREATER_THAN    [ reduce using rule 34 (expr -> IDENTIFIER ASSIGN expr .) ]
  ! LESS_THAN       [ reduce using rule 34 (expr -> IDENTIFIER ASSIGN expr .) ]
  ! EQUAL           [ reduce using rule 34 (expr -> IDENTIFIER ASSIGN expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 34 (expr -> IDENTIFIER ASSIGN expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 34 (expr -> IDENTIFIER ASSIGN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 34 (expr -> IDENTIFIER ASSIGN expr .) ]
  ! OR              [ reduce using rule 34 (expr -> IDENTIFIER ASSIGN expr .) ]
  ! AND             [ reduce using rule 34 (expr -> IDENTIFIER ASSIGN expr .) ]


state 89

    (35) expr -> IDENTIFIER LPAREN clist . RPAREN

    RPAREN          shift and go to state 122


state 90

    (60) defvar -> IDENTIFIER DBL_COLON type .
    (61) defvar -> IDENTIFIER DBL_COLON type . ASSIGN expr

    SEMI_COLON      reduce using rule 60 (defvar -> IDENTIFIER DBL_COLON type .)
    ASSIGN          shift and go to state 123


state 91

    (15) expr -> expr LBRACKET expr . RBRACKET
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

    RBRACKET        shift and go to state 124
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 92

    (17) expr -> expr QUESTION_MARK expr . COLON expr
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

    COLON           shift and go to state 125
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 93

    (18) expr -> expr PLUS expr .
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 18 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 18 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 18 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 18 (expr -> expr PLUS expr .)
    COLON           reduce using rule 18 (expr -> expr PLUS expr .)
    TO              reduce using rule 18 (expr -> expr PLUS expr .)
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64

  ! LBRACKET        [ reduce using rule 18 (expr -> expr PLUS expr .) ]
  ! QUESTION_MARK   [ reduce using rule 18 (expr -> expr PLUS expr .) ]
  ! PLUS            [ reduce using rule 18 (expr -> expr PLUS expr .) ]
  ! MINUS           [ reduce using rule 18 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 18 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 18 (expr -> expr PLUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 18 (expr -> expr PLUS expr .) ]
  ! LESS_THAN       [ reduce using rule 18 (expr -> expr PLUS expr .) ]
  ! EQUAL           [ reduce using rule 18 (expr -> expr PLUS expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 18 (expr -> expr PLUS expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 18 (expr -> expr PLUS expr .) ]
  ! NOT_EQUAL       [ reduce using rule 18 (expr -> expr PLUS expr .) ]
  ! OR              [ reduce using rule 18 (expr -> expr PLUS expr .) ]
  ! AND             [ reduce using rule 18 (expr -> expr PLUS expr .) ]


state 94

    (19) expr -> expr MINUS expr .
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 19 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 19 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 19 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 19 (expr -> expr MINUS expr .)
    COLON           reduce using rule 19 (expr -> expr MINUS expr .)
    TO              reduce using rule 19 (expr -> expr MINUS expr .)
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64

  ! LBRACKET        [ reduce using rule 19 (expr -> expr MINUS expr .) ]
  ! QUESTION_MARK   [ reduce using rule 19 (expr -> expr MINUS expr .) ]
  ! PLUS            [ reduce using rule 19 (expr -> expr MINUS expr .) ]
  ! MINUS           [ reduce using rule 19 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 19 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 19 (expr -> expr MINUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 19 (expr -> expr MINUS expr .) ]
  ! LESS_THAN       [ reduce using rule 19 (expr -> expr MINUS expr .) ]
  ! EQUAL           [ reduce using rule 19 (expr -> expr MINUS expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 19 (expr -> expr MINUS expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 19 (expr -> expr MINUS expr .) ]
  ! NOT_EQUAL       [ reduce using rule 19 (expr -> expr MINUS expr .) ]
  ! OR              [ reduce using rule 19 (expr -> expr MINUS expr .) ]
  ! AND             [ reduce using rule 19 (expr -> expr MINUS expr .) ]


state 95

    (20) expr -> expr TIMES expr .
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 20 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 20 (expr -> expr TIMES expr .)
    RBRACKET        reduce using rule 20 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 20 (expr -> expr TIMES expr .)
    COLON           reduce using rule 20 (expr -> expr TIMES expr .)
    TO              reduce using rule 20 (expr -> expr TIMES expr .)
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64

  ! LBRACKET        [ reduce using rule 20 (expr -> expr TIMES expr .) ]
  ! QUESTION_MARK   [ reduce using rule 20 (expr -> expr TIMES expr .) ]
  ! PLUS            [ reduce using rule 20 (expr -> expr TIMES expr .) ]
  ! MINUS           [ reduce using rule 20 (expr -> expr TIMES expr .) ]
  ! TIMES           [ reduce using rule 20 (expr -> expr TIMES expr .) ]
  ! DIVIDE          [ reduce using rule 20 (expr -> expr TIMES expr .) ]
  ! GREATER_THAN    [ reduce using rule 20 (expr -> expr TIMES expr .) ]
  ! LESS_THAN       [ reduce using rule 20 (expr -> expr TIMES expr .) ]
  ! EQUAL           [ reduce using rule 20 (expr -> expr TIMES expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 20 (expr -> expr TIMES expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 20 (expr -> expr TIMES expr .) ]
  ! NOT_EQUAL       [ reduce using rule 20 (expr -> expr TIMES expr .) ]
  ! OR              [ reduce using rule 20 (expr -> expr TIMES expr .) ]
  ! AND             [ reduce using rule 20 (expr -> expr TIMES expr .) ]


state 96

    (21) expr -> expr DIVIDE expr .
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 21 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 21 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 21 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 21 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 21 (expr -> expr DIVIDE expr .)
    TO              reduce using rule 21 (expr -> expr DIVIDE expr .)
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64

  ! LBRACKET        [ reduce using rule 21 (expr -> expr DIVIDE expr .) ]
  ! QUESTION_MARK   [ reduce using rule 21 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ reduce using rule 21 (expr -> expr DIVIDE expr .) ]
  ! MINUS           [ reduce using rule 21 (expr -> expr DIVIDE expr .) ]
  ! TIMES           [ reduce using rule 21 (expr -> expr DIVIDE expr .) ]
  ! DIVIDE          [ reduce using rule 21 (expr -> expr DIVIDE expr .) ]
  ! GREATER_THAN    [ reduce using rule 21 (expr -> expr DIVIDE expr .) ]
  ! LESS_THAN       [ reduce using rule 21 (expr -> expr DIVIDE expr .) ]
  ! EQUAL           [ reduce using rule 21 (expr -> expr DIVIDE expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 21 (expr -> expr DIVIDE expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 21 (expr -> expr DIVIDE expr .) ]
  ! NOT_EQUAL       [ reduce using rule 21 (expr -> expr DIVIDE expr .) ]
  ! OR              [ reduce using rule 21 (expr -> expr DIVIDE expr .) ]
  ! AND             [ reduce using rule 21 (expr -> expr DIVIDE expr .) ]


state 97

    (22) expr -> expr GREATER_THAN expr .
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 22 (expr -> expr GREATER_THAN expr .)
    COMMA           reduce using rule 22 (expr -> expr GREATER_THAN expr .)
    RBRACKET        reduce using rule 22 (expr -> expr GREATER_THAN expr .)
    RPAREN          reduce using rule 22 (expr -> expr GREATER_THAN expr .)
    COLON           reduce using rule 22 (expr -> expr GREATER_THAN expr .)
    TO              reduce using rule 22 (expr -> expr GREATER_THAN expr .)
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64

  ! LBRACKET        [ reduce using rule 22 (expr -> expr GREATER_THAN expr .) ]
  ! QUESTION_MARK   [ reduce using rule 22 (expr -> expr GREATER_THAN expr .) ]
  ! PLUS            [ reduce using rule 22 (expr -> expr GREATER_THAN expr .) ]
  ! MINUS           [ reduce using rule 22 (expr -> expr GREATER_THAN expr .) ]
  ! TIMES           [ reduce using rule 22 (expr -> expr GREATER_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 22 (expr -> expr GREATER_THAN expr .) ]
  ! GREATER_THAN    [ reduce using rule 22 (expr -> expr GREATER_THAN expr .) ]
  ! LESS_THAN       [ reduce using rule 22 (expr -> expr GREATER_THAN expr .) ]
  ! EQUAL           [ reduce using rule 22 (expr -> expr GREATER_THAN expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 22 (expr -> expr GREATER_THAN expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 22 (expr -> expr GREATER_THAN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 22 (expr -> expr GREATER_THAN expr .) ]
  ! OR              [ reduce using rule 22 (expr -> expr GREATER_THAN expr .) ]
  ! AND             [ reduce using rule 22 (expr -> expr GREATER_THAN expr .) ]


state 98

    (23) expr -> expr LESS_THAN expr .
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 23 (expr -> expr LESS_THAN expr .)
    COMMA           reduce using rule 23 (expr -> expr LESS_THAN expr .)
    RBRACKET        reduce using rule 23 (expr -> expr LESS_THAN expr .)
    RPAREN          reduce using rule 23 (expr -> expr LESS_THAN expr .)
    COLON           reduce using rule 23 (expr -> expr LESS_THAN expr .)
    TO              reduce using rule 23 (expr -> expr LESS_THAN expr .)
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64

  ! LBRACKET        [ reduce using rule 23 (expr -> expr LESS_THAN expr .) ]
  ! QUESTION_MARK   [ reduce using rule 23 (expr -> expr LESS_THAN expr .) ]
  ! PLUS            [ reduce using rule 23 (expr -> expr LESS_THAN expr .) ]
  ! MINUS           [ reduce using rule 23 (expr -> expr LESS_THAN expr .) ]
  ! TIMES           [ reduce using rule 23 (expr -> expr LESS_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 23 (expr -> expr LESS_THAN expr .) ]
  ! GREATER_THAN    [ reduce using rule 23 (expr -> expr LESS_THAN expr .) ]
  ! LESS_THAN       [ reduce using rule 23 (expr -> expr LESS_THAN expr .) ]
  ! EQUAL           [ reduce using rule 23 (expr -> expr LESS_THAN expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 23 (expr -> expr LESS_THAN expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 23 (expr -> expr LESS_THAN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 23 (expr -> expr LESS_THAN expr .) ]
  ! OR              [ reduce using rule 23 (expr -> expr LESS_THAN expr .) ]
  ! AND             [ reduce using rule 23 (expr -> expr LESS_THAN expr .) ]


state 99

    (24) expr -> expr EQUAL expr .
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 24 (expr -> expr EQUAL expr .)
    COMMA           reduce using rule 24 (expr -> expr EQUAL expr .)
    RBRACKET        reduce using rule 24 (expr -> expr EQUAL expr .)
    RPAREN          reduce using rule 24 (expr -> expr EQUAL expr .)
    COLON           reduce using rule 24 (expr -> expr EQUAL expr .)
    TO              reduce using rule 24 (expr -> expr EQUAL expr .)
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64

  ! LBRACKET        [ reduce using rule 24 (expr -> expr EQUAL expr .) ]
  ! QUESTION_MARK   [ reduce using rule 24 (expr -> expr EQUAL expr .) ]
  ! PLUS            [ reduce using rule 24 (expr -> expr EQUAL expr .) ]
  ! MINUS           [ reduce using rule 24 (expr -> expr EQUAL expr .) ]
  ! TIMES           [ reduce using rule 24 (expr -> expr EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 24 (expr -> expr EQUAL expr .) ]
  ! GREATER_THAN    [ reduce using rule 24 (expr -> expr EQUAL expr .) ]
  ! LESS_THAN       [ reduce using rule 24 (expr -> expr EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 24 (expr -> expr EQUAL expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 24 (expr -> expr EQUAL expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 24 (expr -> expr EQUAL expr .) ]
  ! NOT_EQUAL       [ reduce using rule 24 (expr -> expr EQUAL expr .) ]
  ! OR              [ reduce using rule 24 (expr -> expr EQUAL expr .) ]
  ! AND             [ reduce using rule 24 (expr -> expr EQUAL expr .) ]


state 100

    (25) expr -> expr GREATER_THAN_EQUAL expr .
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .)
    COMMA           reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .)
    RBRACKET        reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .)
    RPAREN          reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .)
    COLON           reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .)
    TO              reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .)
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64

  ! LBRACKET        [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! QUESTION_MARK   [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! GREATER_THAN    [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! LESS_THAN       [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! NOT_EQUAL       [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! OR              [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! AND             [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]


state 101

    (26) expr -> expr LESS_THAN_EQUAL expr .
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 26 (expr -> expr LESS_THAN_EQUAL expr .)
    COMMA           reduce using rule 26 (expr -> expr LESS_THAN_EQUAL expr .)
    RBRACKET        reduce using rule 26 (expr -> expr LESS_THAN_EQUAL expr .)
    RPAREN          reduce using rule 26 (expr -> expr LESS_THAN_EQUAL expr .)
    COLON           reduce using rule 26 (expr -> expr LESS_THAN_EQUAL expr .)
    TO              reduce using rule 26 (expr -> expr LESS_THAN_EQUAL expr .)
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64

  ! LBRACKET        [ reduce using rule 26 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! QUESTION_MARK   [ reduce using rule 26 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 26 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 26 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 26 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 26 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! GREATER_THAN    [ reduce using rule 26 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! LESS_THAN       [ reduce using rule 26 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 26 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 26 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 26 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! NOT_EQUAL       [ reduce using rule 26 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! OR              [ reduce using rule 26 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! AND             [ reduce using rule 26 (expr -> expr LESS_THAN_EQUAL expr .) ]


state 102

    (27) expr -> expr NOT_EQUAL expr .
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    COMMA           reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    RBRACKET        reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    RPAREN          reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    COLON           reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    TO              reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64

  ! LBRACKET        [ reduce using rule 27 (expr -> expr NOT_EQUAL expr .) ]
  ! QUESTION_MARK   [ reduce using rule 27 (expr -> expr NOT_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 27 (expr -> expr NOT_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 27 (expr -> expr NOT_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 27 (expr -> expr NOT_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 27 (expr -> expr NOT_EQUAL expr .) ]
  ! GREATER_THAN    [ reduce using rule 27 (expr -> expr NOT_EQUAL expr .) ]
  ! LESS_THAN       [ reduce using rule 27 (expr -> expr NOT_EQUAL expr .) ]
  ! EQUAL           [ reduce using rule 27 (expr -> expr NOT_EQUAL expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 27 (expr -> expr NOT_EQUAL expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 27 (expr -> expr NOT_EQUAL expr .) ]
  ! NOT_EQUAL       [ reduce using rule 27 (expr -> expr NOT_EQUAL expr .) ]
  ! OR              [ reduce using rule 27 (expr -> expr NOT_EQUAL expr .) ]
  ! AND             [ reduce using rule 27 (expr -> expr NOT_EQUAL expr .) ]


state 103

    (28) expr -> expr OR expr .
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 28 (expr -> expr OR expr .)
    COMMA           reduce using rule 28 (expr -> expr OR expr .)
    RBRACKET        reduce using rule 28 (expr -> expr OR expr .)
    RPAREN          reduce using rule 28 (expr -> expr OR expr .)
    COLON           reduce using rule 28 (expr -> expr OR expr .)
    TO              reduce using rule 28 (expr -> expr OR expr .)
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64

  ! LBRACKET        [ reduce using rule 28 (expr -> expr OR expr .) ]
  ! QUESTION_MARK   [ reduce using rule 28 (expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 28 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 28 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 28 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 28 (expr -> expr OR expr .) ]
  ! GREATER_THAN    [ reduce using rule 28 (expr -> expr OR expr .) ]
  ! LESS_THAN       [ reduce using rule 28 (expr -> expr OR expr .) ]
  ! EQUAL           [ reduce using rule 28 (expr -> expr OR expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 28 (expr -> expr OR expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 28 (expr -> expr OR expr .) ]
  ! NOT_EQUAL       [ reduce using rule 28 (expr -> expr OR expr .) ]
  ! OR              [ reduce using rule 28 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 28 (expr -> expr OR expr .) ]


state 104

    (29) expr -> expr AND expr .
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 29 (expr -> expr AND expr .)
    COMMA           reduce using rule 29 (expr -> expr AND expr .)
    RBRACKET        reduce using rule 29 (expr -> expr AND expr .)
    RPAREN          reduce using rule 29 (expr -> expr AND expr .)
    COLON           reduce using rule 29 (expr -> expr AND expr .)
    TO              reduce using rule 29 (expr -> expr AND expr .)
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64

  ! LBRACKET        [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! QUESTION_MARK   [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! GREATER_THAN    [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! LESS_THAN       [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! EQUAL           [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! NOT_EQUAL       [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! OR              [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! AND             [ reduce using rule 29 (expr -> expr AND expr .) ]


state 105

    (53) statement -> RETURN expr SEMI_COLON .

    RETURN          reduce using rule 53 (statement -> RETURN expr SEMI_COLON .)
    IF              reduce using rule 53 (statement -> RETURN expr SEMI_COLON .)
    WHILE_LOOP      reduce using rule 53 (statement -> RETURN expr SEMI_COLON .)
    DO              reduce using rule 53 (statement -> RETURN expr SEMI_COLON .)
    FOR_LOOP        reduce using rule 53 (statement -> RETURN expr SEMI_COLON .)
    BEGIN           reduce using rule 53 (statement -> RETURN expr SEMI_COLON .)
    LBRACKET        reduce using rule 53 (statement -> RETURN expr SEMI_COLON .)
    NOT             reduce using rule 53 (statement -> RETURN expr SEMI_COLON .)
    PLUS            reduce using rule 53 (statement -> RETURN expr SEMI_COLON .)
    MINUS           reduce using rule 53 (statement -> RETURN expr SEMI_COLON .)
    IDENTIFIER      reduce using rule 53 (statement -> RETURN expr SEMI_COLON .)
    NUMBER          reduce using rule 53 (statement -> RETURN expr SEMI_COLON .)
    FN              reduce using rule 53 (statement -> RETURN expr SEMI_COLON .)
    RCURLYBR        reduce using rule 53 (statement -> RETURN expr SEMI_COLON .)
    END             reduce using rule 53 (statement -> RETURN expr SEMI_COLON .)


state 106

    (54) statement -> IF LBRACKET expr . RBRACKET stmt
    (55) statement -> IF LBRACKET expr . RBRACKET stmt ELSE stmt
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

    RBRACKET        shift and go to state 126
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 107

    (16) expr -> LBRACKET clist RBRACKET .

    SEMI_COLON      reduce using rule 16 (expr -> LBRACKET clist RBRACKET .)
    LBRACKET        reduce using rule 16 (expr -> LBRACKET clist RBRACKET .)
    QUESTION_MARK   reduce using rule 16 (expr -> LBRACKET clist RBRACKET .)
    PLUS            reduce using rule 16 (expr -> LBRACKET clist RBRACKET .)
    MINUS           reduce using rule 16 (expr -> LBRACKET clist RBRACKET .)
    TIMES           reduce using rule 16 (expr -> LBRACKET clist RBRACKET .)
    DIVIDE          reduce using rule 16 (expr -> LBRACKET clist RBRACKET .)
    GREATER_THAN    reduce using rule 16 (expr -> LBRACKET clist RBRACKET .)
    LESS_THAN       reduce using rule 16 (expr -> LBRACKET clist RBRACKET .)
    EQUAL           reduce using rule 16 (expr -> LBRACKET clist RBRACKET .)
    GREATER_THAN_EQUAL reduce using rule 16 (expr -> LBRACKET clist RBRACKET .)
    LESS_THAN_EQUAL reduce using rule 16 (expr -> LBRACKET clist RBRACKET .)
    NOT_EQUAL       reduce using rule 16 (expr -> LBRACKET clist RBRACKET .)
    OR              reduce using rule 16 (expr -> LBRACKET clist RBRACKET .)
    AND             reduce using rule 16 (expr -> LBRACKET clist RBRACKET .)
    COMMA           reduce using rule 16 (expr -> LBRACKET clist RBRACKET .)
    RBRACKET        reduce using rule 16 (expr -> LBRACKET clist RBRACKET .)
    RPAREN          reduce using rule 16 (expr -> LBRACKET clist RBRACKET .)
    COLON           reduce using rule 16 (expr -> LBRACKET clist RBRACKET .)
    TO              reduce using rule 16 (expr -> LBRACKET clist RBRACKET .)


state 108

    (41) clist -> expr COMMA . clist
    (40) clist -> . expr
    (41) clist -> . expr COMMA clist
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 70
    clist                          shift and go to state 127

state 109

    (56) statement -> WHILE_LOOP LBRACKET expr . RBRACKET stmt
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

    RBRACKET        shift and go to state 128
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 110

    (11) stmt -> DO stmt . WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON

    WHILE_LOOP      shift and go to state 129


state 111

    (57) statement -> DO stmt WHILE_LOOP . LBRACKET expr RBRACKET SEMI_COLON

    LBRACKET        shift and go to state 130


state 112

    (10) stmt -> WHILE_LOOP LBRACKET . expr RBRACKET stmt
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 131

state 113

    (5) stmt -> expr SEMI_COLON .

    WHILE_LOOP      reduce using rule 5 (stmt -> expr SEMI_COLON .)
    ELSE            reduce using rule 5 (stmt -> expr SEMI_COLON .)
    RETURN          reduce using rule 5 (stmt -> expr SEMI_COLON .)
    IF              reduce using rule 5 (stmt -> expr SEMI_COLON .)
    DO              reduce using rule 5 (stmt -> expr SEMI_COLON .)
    FOR_LOOP        reduce using rule 5 (stmt -> expr SEMI_COLON .)
    BEGIN           reduce using rule 5 (stmt -> expr SEMI_COLON .)
    LBRACKET        reduce using rule 5 (stmt -> expr SEMI_COLON .)
    NOT             reduce using rule 5 (stmt -> expr SEMI_COLON .)
    PLUS            reduce using rule 5 (stmt -> expr SEMI_COLON .)
    MINUS           reduce using rule 5 (stmt -> expr SEMI_COLON .)
    IDENTIFIER      reduce using rule 5 (stmt -> expr SEMI_COLON .)
    NUMBER          reduce using rule 5 (stmt -> expr SEMI_COLON .)
    FN              reduce using rule 5 (stmt -> expr SEMI_COLON .)
    RCURLYBR        reduce using rule 5 (stmt -> expr SEMI_COLON .)
    END             reduce using rule 5 (stmt -> expr SEMI_COLON .)


state 114

    (6) stmt -> defvar SEMI_COLON .

    WHILE_LOOP      reduce using rule 6 (stmt -> defvar SEMI_COLON .)
    ELSE            reduce using rule 6 (stmt -> defvar SEMI_COLON .)
    RETURN          reduce using rule 6 (stmt -> defvar SEMI_COLON .)
    IF              reduce using rule 6 (stmt -> defvar SEMI_COLON .)
    DO              reduce using rule 6 (stmt -> defvar SEMI_COLON .)
    FOR_LOOP        reduce using rule 6 (stmt -> defvar SEMI_COLON .)
    BEGIN           reduce using rule 6 (stmt -> defvar SEMI_COLON .)
    LBRACKET        reduce using rule 6 (stmt -> defvar SEMI_COLON .)
    NOT             reduce using rule 6 (stmt -> defvar SEMI_COLON .)
    PLUS            reduce using rule 6 (stmt -> defvar SEMI_COLON .)
    MINUS           reduce using rule 6 (stmt -> defvar SEMI_COLON .)
    IDENTIFIER      reduce using rule 6 (stmt -> defvar SEMI_COLON .)
    NUMBER          reduce using rule 6 (stmt -> defvar SEMI_COLON .)
    FN              reduce using rule 6 (stmt -> defvar SEMI_COLON .)
    RCURLYBR        reduce using rule 6 (stmt -> defvar SEMI_COLON .)
    END             reduce using rule 6 (stmt -> defvar SEMI_COLON .)


state 115

    (8) stmt -> IF LBRACKET . expr RBRACKET stmt
    (9) stmt -> IF LBRACKET . expr RBRACKET stmt ELSE stmt
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 132

state 116

    (12) stmt -> FOR_LOOP LPAREN . IDENTIFIER ASSIGN expr TO expr RPAREN stmt

    IDENTIFIER      shift and go to state 133


state 117

    (13) stmt -> BEGIN body . END

    END             shift and go to state 134


state 118

    (14) stmt -> RETURN expr . SEMI_COLON
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

    SEMI_COLON      shift and go to state 135
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 119

    (58) statement -> FOR_LOOP LPAREN IDENTIFIER . ASSIGN expr TO expr RPAREN stmt

    ASSIGN          shift and go to state 136


state 120

    (59) statement -> BEGIN body END .

    RETURN          reduce using rule 59 (statement -> BEGIN body END .)
    IF              reduce using rule 59 (statement -> BEGIN body END .)
    WHILE_LOOP      reduce using rule 59 (statement -> BEGIN body END .)
    DO              reduce using rule 59 (statement -> BEGIN body END .)
    FOR_LOOP        reduce using rule 59 (statement -> BEGIN body END .)
    BEGIN           reduce using rule 59 (statement -> BEGIN body END .)
    LBRACKET        reduce using rule 59 (statement -> BEGIN body END .)
    NOT             reduce using rule 59 (statement -> BEGIN body END .)
    PLUS            reduce using rule 59 (statement -> BEGIN body END .)
    MINUS           reduce using rule 59 (statement -> BEGIN body END .)
    IDENTIFIER      reduce using rule 59 (statement -> BEGIN body END .)
    NUMBER          reduce using rule 59 (statement -> BEGIN body END .)
    FN              reduce using rule 59 (statement -> BEGIN body END .)
    RCURLYBR        reduce using rule 59 (statement -> BEGIN body END .)
    END             reduce using rule 59 (statement -> BEGIN body END .)


state 121

    (4) func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON .

    FN              reduce using rule 4 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON .)
    $end            reduce using rule 4 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON .)
    RETURN          reduce using rule 4 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON .)
    IF              reduce using rule 4 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON .)
    WHILE_LOOP      reduce using rule 4 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON .)
    DO              reduce using rule 4 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON .)
    FOR_LOOP        reduce using rule 4 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON .)
    BEGIN           reduce using rule 4 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON .)
    LBRACKET        reduce using rule 4 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON .)
    NOT             reduce using rule 4 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON .)
    PLUS            reduce using rule 4 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON .)
    MINUS           reduce using rule 4 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON .)
    IDENTIFIER      reduce using rule 4 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON .)
    NUMBER          reduce using rule 4 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON .)
    RCURLYBR        reduce using rule 4 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON .)
    END             reduce using rule 4 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON .)
    ELSE            reduce using rule 4 (func -> FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON .)


state 122

    (35) expr -> IDENTIFIER LPAREN clist RPAREN .

    SEMI_COLON      reduce using rule 35 (expr -> IDENTIFIER LPAREN clist RPAREN .)
    LBRACKET        reduce using rule 35 (expr -> IDENTIFIER LPAREN clist RPAREN .)
    QUESTION_MARK   reduce using rule 35 (expr -> IDENTIFIER LPAREN clist RPAREN .)
    PLUS            reduce using rule 35 (expr -> IDENTIFIER LPAREN clist RPAREN .)
    MINUS           reduce using rule 35 (expr -> IDENTIFIER LPAREN clist RPAREN .)
    TIMES           reduce using rule 35 (expr -> IDENTIFIER LPAREN clist RPAREN .)
    DIVIDE          reduce using rule 35 (expr -> IDENTIFIER LPAREN clist RPAREN .)
    GREATER_THAN    reduce using rule 35 (expr -> IDENTIFIER LPAREN clist RPAREN .)
    LESS_THAN       reduce using rule 35 (expr -> IDENTIFIER LPAREN clist RPAREN .)
    EQUAL           reduce using rule 35 (expr -> IDENTIFIER LPAREN clist RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 35 (expr -> IDENTIFIER LPAREN clist RPAREN .)
    LESS_THAN_EQUAL reduce using rule 35 (expr -> IDENTIFIER LPAREN clist RPAREN .)
    NOT_EQUAL       reduce using rule 35 (expr -> IDENTIFIER LPAREN clist RPAREN .)
    OR              reduce using rule 35 (expr -> IDENTIFIER LPAREN clist RPAREN .)
    AND             reduce using rule 35 (expr -> IDENTIFIER LPAREN clist RPAREN .)
    COMMA           reduce using rule 35 (expr -> IDENTIFIER LPAREN clist RPAREN .)
    RBRACKET        reduce using rule 35 (expr -> IDENTIFIER LPAREN clist RPAREN .)
    RPAREN          reduce using rule 35 (expr -> IDENTIFIER LPAREN clist RPAREN .)
    COLON           reduce using rule 35 (expr -> IDENTIFIER LPAREN clist RPAREN .)
    TO              reduce using rule 35 (expr -> IDENTIFIER LPAREN clist RPAREN .)


state 123

    (61) defvar -> IDENTIFIER DBL_COLON type ASSIGN . expr
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 137

state 124

    (15) expr -> expr LBRACKET expr RBRACKET .

    SEMI_COLON      reduce using rule 15 (expr -> expr LBRACKET expr RBRACKET .)
    LBRACKET        reduce using rule 15 (expr -> expr LBRACKET expr RBRACKET .)
    QUESTION_MARK   reduce using rule 15 (expr -> expr LBRACKET expr RBRACKET .)
    PLUS            reduce using rule 15 (expr -> expr LBRACKET expr RBRACKET .)
    MINUS           reduce using rule 15 (expr -> expr LBRACKET expr RBRACKET .)
    TIMES           reduce using rule 15 (expr -> expr LBRACKET expr RBRACKET .)
    DIVIDE          reduce using rule 15 (expr -> expr LBRACKET expr RBRACKET .)
    GREATER_THAN    reduce using rule 15 (expr -> expr LBRACKET expr RBRACKET .)
    LESS_THAN       reduce using rule 15 (expr -> expr LBRACKET expr RBRACKET .)
    EQUAL           reduce using rule 15 (expr -> expr LBRACKET expr RBRACKET .)
    GREATER_THAN_EQUAL reduce using rule 15 (expr -> expr LBRACKET expr RBRACKET .)
    LESS_THAN_EQUAL reduce using rule 15 (expr -> expr LBRACKET expr RBRACKET .)
    NOT_EQUAL       reduce using rule 15 (expr -> expr LBRACKET expr RBRACKET .)
    OR              reduce using rule 15 (expr -> expr LBRACKET expr RBRACKET .)
    AND             reduce using rule 15 (expr -> expr LBRACKET expr RBRACKET .)
    COMMA           reduce using rule 15 (expr -> expr LBRACKET expr RBRACKET .)
    RBRACKET        reduce using rule 15 (expr -> expr LBRACKET expr RBRACKET .)
    RPAREN          reduce using rule 15 (expr -> expr LBRACKET expr RBRACKET .)
    COLON           reduce using rule 15 (expr -> expr LBRACKET expr RBRACKET .)
    TO              reduce using rule 15 (expr -> expr LBRACKET expr RBRACKET .)


state 125

    (17) expr -> expr QUESTION_MARK expr COLON . expr
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 138

state 126

    (54) statement -> IF LBRACKET expr RBRACKET . stmt
    (55) statement -> IF LBRACKET expr RBRACKET . stmt ELSE stmt
    (5) stmt -> . expr SEMI_COLON
    (6) stmt -> . defvar SEMI_COLON
    (7) stmt -> . func
    (8) stmt -> . IF LBRACKET expr RBRACKET stmt
    (9) stmt -> . IF LBRACKET expr RBRACKET stmt ELSE stmt
    (10) stmt -> . WHILE_LOOP LBRACKET expr RBRACKET stmt
    (11) stmt -> . DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON
    (12) stmt -> . FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt
    (13) stmt -> . BEGIN body END
    (14) stmt -> . RETURN expr SEMI_COLON
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER
    (60) defvar -> . IDENTIFIER DBL_COLON type
    (61) defvar -> . IDENTIFIER DBL_COLON type ASSIGN expr
    (3) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON

    IF              shift and go to state 78
    WHILE_LOOP      shift and go to state 74
    DO              shift and go to state 72
    FOR_LOOP        shift and go to state 79
    BEGIN           shift and go to state 80
    RETURN          shift and go to state 81
    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 43
    FN              shift and go to state 4

    expr                           shift and go to state 75
    stmt                           shift and go to state 139
    defvar                         shift and go to state 76
    func                           shift and go to state 77

state 127

    (41) clist -> expr COMMA clist .

    RBRACKET        reduce using rule 41 (clist -> expr COMMA clist .)
    RPAREN          reduce using rule 41 (clist -> expr COMMA clist .)


state 128

    (56) statement -> WHILE_LOOP LBRACKET expr RBRACKET . stmt
    (5) stmt -> . expr SEMI_COLON
    (6) stmt -> . defvar SEMI_COLON
    (7) stmt -> . func
    (8) stmt -> . IF LBRACKET expr RBRACKET stmt
    (9) stmt -> . IF LBRACKET expr RBRACKET stmt ELSE stmt
    (10) stmt -> . WHILE_LOOP LBRACKET expr RBRACKET stmt
    (11) stmt -> . DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON
    (12) stmt -> . FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt
    (13) stmt -> . BEGIN body END
    (14) stmt -> . RETURN expr SEMI_COLON
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER
    (60) defvar -> . IDENTIFIER DBL_COLON type
    (61) defvar -> . IDENTIFIER DBL_COLON type ASSIGN expr
    (3) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON

    IF              shift and go to state 78
    WHILE_LOOP      shift and go to state 74
    DO              shift and go to state 72
    FOR_LOOP        shift and go to state 79
    BEGIN           shift and go to state 80
    RETURN          shift and go to state 81
    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 43
    FN              shift and go to state 4

    expr                           shift and go to state 75
    stmt                           shift and go to state 140
    defvar                         shift and go to state 76
    func                           shift and go to state 77

state 129

    (11) stmt -> DO stmt WHILE_LOOP . LBRACKET expr RBRACKET SEMI_COLON

    LBRACKET        shift and go to state 141


state 130

    (57) statement -> DO stmt WHILE_LOOP LBRACKET . expr RBRACKET SEMI_COLON
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 142

state 131

    (10) stmt -> WHILE_LOOP LBRACKET expr . RBRACKET stmt
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

    RBRACKET        shift and go to state 143
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 132

    (8) stmt -> IF LBRACKET expr . RBRACKET stmt
    (9) stmt -> IF LBRACKET expr . RBRACKET stmt ELSE stmt
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

    RBRACKET        shift and go to state 144
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 133

    (12) stmt -> FOR_LOOP LPAREN IDENTIFIER . ASSIGN expr TO expr RPAREN stmt

    ASSIGN          shift and go to state 145


state 134

    (13) stmt -> BEGIN body END .

    WHILE_LOOP      reduce using rule 13 (stmt -> BEGIN body END .)
    ELSE            reduce using rule 13 (stmt -> BEGIN body END .)
    RETURN          reduce using rule 13 (stmt -> BEGIN body END .)
    IF              reduce using rule 13 (stmt -> BEGIN body END .)
    DO              reduce using rule 13 (stmt -> BEGIN body END .)
    FOR_LOOP        reduce using rule 13 (stmt -> BEGIN body END .)
    BEGIN           reduce using rule 13 (stmt -> BEGIN body END .)
    LBRACKET        reduce using rule 13 (stmt -> BEGIN body END .)
    NOT             reduce using rule 13 (stmt -> BEGIN body END .)
    PLUS            reduce using rule 13 (stmt -> BEGIN body END .)
    MINUS           reduce using rule 13 (stmt -> BEGIN body END .)
    IDENTIFIER      reduce using rule 13 (stmt -> BEGIN body END .)
    NUMBER          reduce using rule 13 (stmt -> BEGIN body END .)
    FN              reduce using rule 13 (stmt -> BEGIN body END .)
    RCURLYBR        reduce using rule 13 (stmt -> BEGIN body END .)
    END             reduce using rule 13 (stmt -> BEGIN body END .)


state 135

    (14) stmt -> RETURN expr SEMI_COLON .

    WHILE_LOOP      reduce using rule 14 (stmt -> RETURN expr SEMI_COLON .)
    ELSE            reduce using rule 14 (stmt -> RETURN expr SEMI_COLON .)
    RETURN          reduce using rule 14 (stmt -> RETURN expr SEMI_COLON .)
    IF              reduce using rule 14 (stmt -> RETURN expr SEMI_COLON .)
    DO              reduce using rule 14 (stmt -> RETURN expr SEMI_COLON .)
    FOR_LOOP        reduce using rule 14 (stmt -> RETURN expr SEMI_COLON .)
    BEGIN           reduce using rule 14 (stmt -> RETURN expr SEMI_COLON .)
    LBRACKET        reduce using rule 14 (stmt -> RETURN expr SEMI_COLON .)
    NOT             reduce using rule 14 (stmt -> RETURN expr SEMI_COLON .)
    PLUS            reduce using rule 14 (stmt -> RETURN expr SEMI_COLON .)
    MINUS           reduce using rule 14 (stmt -> RETURN expr SEMI_COLON .)
    IDENTIFIER      reduce using rule 14 (stmt -> RETURN expr SEMI_COLON .)
    NUMBER          reduce using rule 14 (stmt -> RETURN expr SEMI_COLON .)
    FN              reduce using rule 14 (stmt -> RETURN expr SEMI_COLON .)
    RCURLYBR        reduce using rule 14 (stmt -> RETURN expr SEMI_COLON .)
    END             reduce using rule 14 (stmt -> RETURN expr SEMI_COLON .)


state 136

    (58) statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN . expr TO expr RPAREN stmt
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 146

state 137

    (61) defvar -> IDENTIFIER DBL_COLON type ASSIGN expr .
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

    SEMI_COLON      reduce using rule 61 (defvar -> IDENTIFIER DBL_COLON type ASSIGN expr .)
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 138

    (17) expr -> expr QUESTION_MARK expr COLON expr .
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 17 (expr -> expr QUESTION_MARK expr COLON expr .)
    COMMA           reduce using rule 17 (expr -> expr QUESTION_MARK expr COLON expr .)
    RBRACKET        reduce using rule 17 (expr -> expr QUESTION_MARK expr COLON expr .)
    RPAREN          reduce using rule 17 (expr -> expr QUESTION_MARK expr COLON expr .)
    COLON           reduce using rule 17 (expr -> expr QUESTION_MARK expr COLON expr .)
    TO              reduce using rule 17 (expr -> expr QUESTION_MARK expr COLON expr .)
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64

  ! LBRACKET        [ reduce using rule 17 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! QUESTION_MARK   [ reduce using rule 17 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! PLUS            [ reduce using rule 17 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! MINUS           [ reduce using rule 17 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! TIMES           [ reduce using rule 17 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! DIVIDE          [ reduce using rule 17 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! GREATER_THAN    [ reduce using rule 17 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! LESS_THAN       [ reduce using rule 17 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! EQUAL           [ reduce using rule 17 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 17 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 17 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! NOT_EQUAL       [ reduce using rule 17 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! OR              [ reduce using rule 17 (expr -> expr QUESTION_MARK expr COLON expr .) ]
  ! AND             [ reduce using rule 17 (expr -> expr QUESTION_MARK expr COLON expr .) ]


state 139

    (54) statement -> IF LBRACKET expr RBRACKET stmt .
    (55) statement -> IF LBRACKET expr RBRACKET stmt . ELSE stmt

    RETURN          reduce using rule 54 (statement -> IF LBRACKET expr RBRACKET stmt .)
    IF              reduce using rule 54 (statement -> IF LBRACKET expr RBRACKET stmt .)
    WHILE_LOOP      reduce using rule 54 (statement -> IF LBRACKET expr RBRACKET stmt .)
    DO              reduce using rule 54 (statement -> IF LBRACKET expr RBRACKET stmt .)
    FOR_LOOP        reduce using rule 54 (statement -> IF LBRACKET expr RBRACKET stmt .)
    BEGIN           reduce using rule 54 (statement -> IF LBRACKET expr RBRACKET stmt .)
    LBRACKET        reduce using rule 54 (statement -> IF LBRACKET expr RBRACKET stmt .)
    NOT             reduce using rule 54 (statement -> IF LBRACKET expr RBRACKET stmt .)
    PLUS            reduce using rule 54 (statement -> IF LBRACKET expr RBRACKET stmt .)
    MINUS           reduce using rule 54 (statement -> IF LBRACKET expr RBRACKET stmt .)
    IDENTIFIER      reduce using rule 54 (statement -> IF LBRACKET expr RBRACKET stmt .)
    NUMBER          reduce using rule 54 (statement -> IF LBRACKET expr RBRACKET stmt .)
    FN              reduce using rule 54 (statement -> IF LBRACKET expr RBRACKET stmt .)
    RCURLYBR        reduce using rule 54 (statement -> IF LBRACKET expr RBRACKET stmt .)
    END             reduce using rule 54 (statement -> IF LBRACKET expr RBRACKET stmt .)
    ELSE            shift and go to state 147


state 140

    (56) statement -> WHILE_LOOP LBRACKET expr RBRACKET stmt .

    RETURN          reduce using rule 56 (statement -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    IF              reduce using rule 56 (statement -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    WHILE_LOOP      reduce using rule 56 (statement -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    DO              reduce using rule 56 (statement -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    FOR_LOOP        reduce using rule 56 (statement -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    BEGIN           reduce using rule 56 (statement -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    LBRACKET        reduce using rule 56 (statement -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    NOT             reduce using rule 56 (statement -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    PLUS            reduce using rule 56 (statement -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    MINUS           reduce using rule 56 (statement -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    IDENTIFIER      reduce using rule 56 (statement -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    NUMBER          reduce using rule 56 (statement -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    FN              reduce using rule 56 (statement -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    RCURLYBR        reduce using rule 56 (statement -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    END             reduce using rule 56 (statement -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)


state 141

    (11) stmt -> DO stmt WHILE_LOOP LBRACKET . expr RBRACKET SEMI_COLON
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 148

state 142

    (57) statement -> DO stmt WHILE_LOOP LBRACKET expr . RBRACKET SEMI_COLON
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

    RBRACKET        shift and go to state 149
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 143

    (10) stmt -> WHILE_LOOP LBRACKET expr RBRACKET . stmt
    (5) stmt -> . expr SEMI_COLON
    (6) stmt -> . defvar SEMI_COLON
    (7) stmt -> . func
    (8) stmt -> . IF LBRACKET expr RBRACKET stmt
    (9) stmt -> . IF LBRACKET expr RBRACKET stmt ELSE stmt
    (10) stmt -> . WHILE_LOOP LBRACKET expr RBRACKET stmt
    (11) stmt -> . DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON
    (12) stmt -> . FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt
    (13) stmt -> . BEGIN body END
    (14) stmt -> . RETURN expr SEMI_COLON
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER
    (60) defvar -> . IDENTIFIER DBL_COLON type
    (61) defvar -> . IDENTIFIER DBL_COLON type ASSIGN expr
    (3) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON

    IF              shift and go to state 78
    WHILE_LOOP      shift and go to state 74
    DO              shift and go to state 72
    FOR_LOOP        shift and go to state 79
    BEGIN           shift and go to state 80
    RETURN          shift and go to state 81
    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 43
    FN              shift and go to state 4

    expr                           shift and go to state 75
    stmt                           shift and go to state 150
    defvar                         shift and go to state 76
    func                           shift and go to state 77

state 144

    (8) stmt -> IF LBRACKET expr RBRACKET . stmt
    (9) stmt -> IF LBRACKET expr RBRACKET . stmt ELSE stmt
    (5) stmt -> . expr SEMI_COLON
    (6) stmt -> . defvar SEMI_COLON
    (7) stmt -> . func
    (8) stmt -> . IF LBRACKET expr RBRACKET stmt
    (9) stmt -> . IF LBRACKET expr RBRACKET stmt ELSE stmt
    (10) stmt -> . WHILE_LOOP LBRACKET expr RBRACKET stmt
    (11) stmt -> . DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON
    (12) stmt -> . FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt
    (13) stmt -> . BEGIN body END
    (14) stmt -> . RETURN expr SEMI_COLON
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER
    (60) defvar -> . IDENTIFIER DBL_COLON type
    (61) defvar -> . IDENTIFIER DBL_COLON type ASSIGN expr
    (3) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON

    IF              shift and go to state 78
    WHILE_LOOP      shift and go to state 74
    DO              shift and go to state 72
    FOR_LOOP        shift and go to state 79
    BEGIN           shift and go to state 80
    RETURN          shift and go to state 81
    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 43
    FN              shift and go to state 4

    expr                           shift and go to state 75
    stmt                           shift and go to state 151
    defvar                         shift and go to state 76
    func                           shift and go to state 77

state 145

    (12) stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN . expr TO expr RPAREN stmt
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 152

state 146

    (58) statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr . TO expr RPAREN stmt
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

    TO              shift and go to state 153
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 147

    (55) statement -> IF LBRACKET expr RBRACKET stmt ELSE . stmt
    (5) stmt -> . expr SEMI_COLON
    (6) stmt -> . defvar SEMI_COLON
    (7) stmt -> . func
    (8) stmt -> . IF LBRACKET expr RBRACKET stmt
    (9) stmt -> . IF LBRACKET expr RBRACKET stmt ELSE stmt
    (10) stmt -> . WHILE_LOOP LBRACKET expr RBRACKET stmt
    (11) stmt -> . DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON
    (12) stmt -> . FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt
    (13) stmt -> . BEGIN body END
    (14) stmt -> . RETURN expr SEMI_COLON
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER
    (60) defvar -> . IDENTIFIER DBL_COLON type
    (61) defvar -> . IDENTIFIER DBL_COLON type ASSIGN expr
    (3) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON

    IF              shift and go to state 78
    WHILE_LOOP      shift and go to state 74
    DO              shift and go to state 72
    FOR_LOOP        shift and go to state 79
    BEGIN           shift and go to state 80
    RETURN          shift and go to state 81
    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 43
    FN              shift and go to state 4

    expr                           shift and go to state 75
    stmt                           shift and go to state 154
    defvar                         shift and go to state 76
    func                           shift and go to state 77

state 148

    (11) stmt -> DO stmt WHILE_LOOP LBRACKET expr . RBRACKET SEMI_COLON
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

    RBRACKET        shift and go to state 155
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 149

    (57) statement -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET . SEMI_COLON

    SEMI_COLON      shift and go to state 156


state 150

    (10) stmt -> WHILE_LOOP LBRACKET expr RBRACKET stmt .

    WHILE_LOOP      reduce using rule 10 (stmt -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    ELSE            reduce using rule 10 (stmt -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    RETURN          reduce using rule 10 (stmt -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    IF              reduce using rule 10 (stmt -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    DO              reduce using rule 10 (stmt -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    FOR_LOOP        reduce using rule 10 (stmt -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    BEGIN           reduce using rule 10 (stmt -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    LBRACKET        reduce using rule 10 (stmt -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    NOT             reduce using rule 10 (stmt -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    PLUS            reduce using rule 10 (stmt -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    MINUS           reduce using rule 10 (stmt -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    IDENTIFIER      reduce using rule 10 (stmt -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    NUMBER          reduce using rule 10 (stmt -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    FN              reduce using rule 10 (stmt -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    RCURLYBR        reduce using rule 10 (stmt -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)
    END             reduce using rule 10 (stmt -> WHILE_LOOP LBRACKET expr RBRACKET stmt .)


state 151

    (8) stmt -> IF LBRACKET expr RBRACKET stmt .
    (9) stmt -> IF LBRACKET expr RBRACKET stmt . ELSE stmt

  ! shift/reduce conflict for ELSE resolved as shift
    WHILE_LOOP      reduce using rule 8 (stmt -> IF LBRACKET expr RBRACKET stmt .)
    RETURN          reduce using rule 8 (stmt -> IF LBRACKET expr RBRACKET stmt .)
    IF              reduce using rule 8 (stmt -> IF LBRACKET expr RBRACKET stmt .)
    DO              reduce using rule 8 (stmt -> IF LBRACKET expr RBRACKET stmt .)
    FOR_LOOP        reduce using rule 8 (stmt -> IF LBRACKET expr RBRACKET stmt .)
    BEGIN           reduce using rule 8 (stmt -> IF LBRACKET expr RBRACKET stmt .)
    LBRACKET        reduce using rule 8 (stmt -> IF LBRACKET expr RBRACKET stmt .)
    NOT             reduce using rule 8 (stmt -> IF LBRACKET expr RBRACKET stmt .)
    PLUS            reduce using rule 8 (stmt -> IF LBRACKET expr RBRACKET stmt .)
    MINUS           reduce using rule 8 (stmt -> IF LBRACKET expr RBRACKET stmt .)
    IDENTIFIER      reduce using rule 8 (stmt -> IF LBRACKET expr RBRACKET stmt .)
    NUMBER          reduce using rule 8 (stmt -> IF LBRACKET expr RBRACKET stmt .)
    FN              reduce using rule 8 (stmt -> IF LBRACKET expr RBRACKET stmt .)
    RCURLYBR        reduce using rule 8 (stmt -> IF LBRACKET expr RBRACKET stmt .)
    END             reduce using rule 8 (stmt -> IF LBRACKET expr RBRACKET stmt .)
    ELSE            shift and go to state 157

  ! ELSE            [ reduce using rule 8 (stmt -> IF LBRACKET expr RBRACKET stmt .) ]


state 152

    (12) stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr . TO expr RPAREN stmt
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

    TO              shift and go to state 158
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 153

    (58) statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO . expr RPAREN stmt
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 159

state 154

    (55) statement -> IF LBRACKET expr RBRACKET stmt ELSE stmt .

    RETURN          reduce using rule 55 (statement -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    IF              reduce using rule 55 (statement -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    WHILE_LOOP      reduce using rule 55 (statement -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    DO              reduce using rule 55 (statement -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    FOR_LOOP        reduce using rule 55 (statement -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    BEGIN           reduce using rule 55 (statement -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    LBRACKET        reduce using rule 55 (statement -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    NOT             reduce using rule 55 (statement -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    PLUS            reduce using rule 55 (statement -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    MINUS           reduce using rule 55 (statement -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    IDENTIFIER      reduce using rule 55 (statement -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    NUMBER          reduce using rule 55 (statement -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    FN              reduce using rule 55 (statement -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    RCURLYBR        reduce using rule 55 (statement -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    END             reduce using rule 55 (statement -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)


state 155

    (11) stmt -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET . SEMI_COLON

    SEMI_COLON      shift and go to state 160


state 156

    (57) statement -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .

    RETURN          reduce using rule 57 (statement -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    IF              reduce using rule 57 (statement -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    WHILE_LOOP      reduce using rule 57 (statement -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    DO              reduce using rule 57 (statement -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    FOR_LOOP        reduce using rule 57 (statement -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    BEGIN           reduce using rule 57 (statement -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    LBRACKET        reduce using rule 57 (statement -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    NOT             reduce using rule 57 (statement -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    PLUS            reduce using rule 57 (statement -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    MINUS           reduce using rule 57 (statement -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    IDENTIFIER      reduce using rule 57 (statement -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    NUMBER          reduce using rule 57 (statement -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    FN              reduce using rule 57 (statement -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    RCURLYBR        reduce using rule 57 (statement -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    END             reduce using rule 57 (statement -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)


state 157

    (9) stmt -> IF LBRACKET expr RBRACKET stmt ELSE . stmt
    (5) stmt -> . expr SEMI_COLON
    (6) stmt -> . defvar SEMI_COLON
    (7) stmt -> . func
    (8) stmt -> . IF LBRACKET expr RBRACKET stmt
    (9) stmt -> . IF LBRACKET expr RBRACKET stmt ELSE stmt
    (10) stmt -> . WHILE_LOOP LBRACKET expr RBRACKET stmt
    (11) stmt -> . DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON
    (12) stmt -> . FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt
    (13) stmt -> . BEGIN body END
    (14) stmt -> . RETURN expr SEMI_COLON
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER
    (60) defvar -> . IDENTIFIER DBL_COLON type
    (61) defvar -> . IDENTIFIER DBL_COLON type ASSIGN expr
    (3) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON

    IF              shift and go to state 78
    WHILE_LOOP      shift and go to state 74
    DO              shift and go to state 72
    FOR_LOOP        shift and go to state 79
    BEGIN           shift and go to state 80
    RETURN          shift and go to state 81
    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 43
    FN              shift and go to state 4

    expr                           shift and go to state 75
    stmt                           shift and go to state 161
    defvar                         shift and go to state 76
    func                           shift and go to state 77

state 158

    (12) stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO . expr RPAREN stmt
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER

    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 67
    NUMBER          shift and go to state 43

    expr                           shift and go to state 162

state 159

    (58) statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr . RPAREN stmt
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

    RPAREN          shift and go to state 163
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 160

    (11) stmt -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .

    WHILE_LOOP      reduce using rule 11 (stmt -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    ELSE            reduce using rule 11 (stmt -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    RETURN          reduce using rule 11 (stmt -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    IF              reduce using rule 11 (stmt -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    DO              reduce using rule 11 (stmt -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    FOR_LOOP        reduce using rule 11 (stmt -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    BEGIN           reduce using rule 11 (stmt -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    LBRACKET        reduce using rule 11 (stmt -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    NOT             reduce using rule 11 (stmt -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    PLUS            reduce using rule 11 (stmt -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    MINUS           reduce using rule 11 (stmt -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    IDENTIFIER      reduce using rule 11 (stmt -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    NUMBER          reduce using rule 11 (stmt -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    FN              reduce using rule 11 (stmt -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    RCURLYBR        reduce using rule 11 (stmt -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)
    END             reduce using rule 11 (stmt -> DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON .)


state 161

    (9) stmt -> IF LBRACKET expr RBRACKET stmt ELSE stmt .

    WHILE_LOOP      reduce using rule 9 (stmt -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    ELSE            reduce using rule 9 (stmt -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    RETURN          reduce using rule 9 (stmt -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    IF              reduce using rule 9 (stmt -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    DO              reduce using rule 9 (stmt -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    FOR_LOOP        reduce using rule 9 (stmt -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    BEGIN           reduce using rule 9 (stmt -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    LBRACKET        reduce using rule 9 (stmt -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    NOT             reduce using rule 9 (stmt -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    PLUS            reduce using rule 9 (stmt -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    MINUS           reduce using rule 9 (stmt -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    IDENTIFIER      reduce using rule 9 (stmt -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    NUMBER          reduce using rule 9 (stmt -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    FN              reduce using rule 9 (stmt -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    RCURLYBR        reduce using rule 9 (stmt -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)
    END             reduce using rule 9 (stmt -> IF LBRACKET expr RBRACKET stmt ELSE stmt .)


state 162

    (12) stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr . RPAREN stmt
    (15) expr -> expr . LBRACKET expr RBRACKET
    (17) expr -> expr . QUESTION_MARK expr COLON expr
    (18) expr -> expr . PLUS expr
    (19) expr -> expr . MINUS expr
    (20) expr -> expr . TIMES expr
    (21) expr -> expr . DIVIDE expr
    (22) expr -> expr . GREATER_THAN expr
    (23) expr -> expr . LESS_THAN expr
    (24) expr -> expr . EQUAL expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . LESS_THAN_EQUAL expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . OR expr
    (29) expr -> expr . AND expr

    RPAREN          shift and go to state 164
    LBRACKET        shift and go to state 51
    QUESTION_MARK   shift and go to state 52
    PLUS            shift and go to state 53
    MINUS           shift and go to state 54
    TIMES           shift and go to state 55
    DIVIDE          shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQUAL           shift and go to state 59
    GREATER_THAN_EQUAL shift and go to state 60
    LESS_THAN_EQUAL shift and go to state 61
    NOT_EQUAL       shift and go to state 62
    OR              shift and go to state 63
    AND             shift and go to state 64


state 163

    (58) statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN . stmt
    (5) stmt -> . expr SEMI_COLON
    (6) stmt -> . defvar SEMI_COLON
    (7) stmt -> . func
    (8) stmt -> . IF LBRACKET expr RBRACKET stmt
    (9) stmt -> . IF LBRACKET expr RBRACKET stmt ELSE stmt
    (10) stmt -> . WHILE_LOOP LBRACKET expr RBRACKET stmt
    (11) stmt -> . DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON
    (12) stmt -> . FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt
    (13) stmt -> . BEGIN body END
    (14) stmt -> . RETURN expr SEMI_COLON
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER
    (60) defvar -> . IDENTIFIER DBL_COLON type
    (61) defvar -> . IDENTIFIER DBL_COLON type ASSIGN expr
    (3) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON

    IF              shift and go to state 78
    WHILE_LOOP      shift and go to state 74
    DO              shift and go to state 72
    FOR_LOOP        shift and go to state 79
    BEGIN           shift and go to state 80
    RETURN          shift and go to state 81
    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 43
    FN              shift and go to state 4

    expr                           shift and go to state 75
    stmt                           shift and go to state 165
    defvar                         shift and go to state 76
    func                           shift and go to state 77

state 164

    (12) stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN . stmt
    (5) stmt -> . expr SEMI_COLON
    (6) stmt -> . defvar SEMI_COLON
    (7) stmt -> . func
    (8) stmt -> . IF LBRACKET expr RBRACKET stmt
    (9) stmt -> . IF LBRACKET expr RBRACKET stmt ELSE stmt
    (10) stmt -> . WHILE_LOOP LBRACKET expr RBRACKET stmt
    (11) stmt -> . DO stmt WHILE_LOOP LBRACKET expr RBRACKET SEMI_COLON
    (12) stmt -> . FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt
    (13) stmt -> . BEGIN body END
    (14) stmt -> . RETURN expr SEMI_COLON
    (15) expr -> . expr LBRACKET expr RBRACKET
    (16) expr -> . LBRACKET clist RBRACKET
    (17) expr -> . expr QUESTION_MARK expr COLON expr
    (18) expr -> . expr PLUS expr
    (19) expr -> . expr MINUS expr
    (20) expr -> . expr TIMES expr
    (21) expr -> . expr DIVIDE expr
    (22) expr -> . expr GREATER_THAN expr
    (23) expr -> . expr LESS_THAN expr
    (24) expr -> . expr EQUAL expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr LESS_THAN_EQUAL expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr OR expr
    (29) expr -> . expr AND expr
    (30) expr -> . NOT expr
    (31) expr -> . PLUS expr
    (32) expr -> . MINUS expr
    (33) expr -> . IDENTIFIER
    (34) expr -> . IDENTIFIER ASSIGN expr
    (35) expr -> . IDENTIFIER LPAREN clist RPAREN
    (36) expr -> . NUMBER
    (60) defvar -> . IDENTIFIER DBL_COLON type
    (61) defvar -> . IDENTIFIER DBL_COLON type ASSIGN expr
    (3) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN LCURLYBR body RCURLYBR
    (4) func -> . FN IDENTIFIER LPAREN flist RPAREN LESS_THAN type GREATER_THAN ARROW RETURN expr SEMI_COLON

    IF              shift and go to state 78
    WHILE_LOOP      shift and go to state 74
    DO              shift and go to state 72
    FOR_LOOP        shift and go to state 79
    BEGIN           shift and go to state 80
    RETURN          shift and go to state 81
    LBRACKET        shift and go to state 35
    NOT             shift and go to state 42
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    IDENTIFIER      shift and go to state 26
    NUMBER          shift and go to state 43
    FN              shift and go to state 4

    expr                           shift and go to state 75
    stmt                           shift and go to state 166
    defvar                         shift and go to state 76
    func                           shift and go to state 77

state 165

    (58) statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .

    RETURN          reduce using rule 58 (statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    IF              reduce using rule 58 (statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    WHILE_LOOP      reduce using rule 58 (statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    DO              reduce using rule 58 (statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    FOR_LOOP        reduce using rule 58 (statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    BEGIN           reduce using rule 58 (statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    LBRACKET        reduce using rule 58 (statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    NOT             reduce using rule 58 (statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    PLUS            reduce using rule 58 (statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    MINUS           reduce using rule 58 (statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    IDENTIFIER      reduce using rule 58 (statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    NUMBER          reduce using rule 58 (statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    FN              reduce using rule 58 (statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    RCURLYBR        reduce using rule 58 (statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    END             reduce using rule 58 (statement -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)


state 166

    (12) stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .

    WHILE_LOOP      reduce using rule 12 (stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    ELSE            reduce using rule 12 (stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    RETURN          reduce using rule 12 (stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    IF              reduce using rule 12 (stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    DO              reduce using rule 12 (stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    FOR_LOOP        reduce using rule 12 (stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    BEGIN           reduce using rule 12 (stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    LBRACKET        reduce using rule 12 (stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    NOT             reduce using rule 12 (stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    PLUS            reduce using rule 12 (stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    MINUS           reduce using rule 12 (stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    IDENTIFIER      reduce using rule 12 (stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    NUMBER          reduce using rule 12 (stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    FN              reduce using rule 12 (stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    RCURLYBR        reduce using rule 12 (stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)
    END             reduce using rule 12 (stmt -> FOR_LOOP LPAREN IDENTIFIER ASSIGN expr TO expr RPAREN stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACKET in state 84 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 84 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 84 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 84 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 84 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 84 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 84 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 84 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 84 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 84 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 84 resolved as shift
WARNING: shift/reduce conflict for OR in state 84 resolved as shift
WARNING: shift/reduce conflict for AND in state 84 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 85 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 85 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 85 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 85 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 85 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 85 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 85 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 85 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 85 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 85 resolved as shift
WARNING: shift/reduce conflict for OR in state 85 resolved as shift
WARNING: shift/reduce conflict for AND in state 85 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 86 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 86 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 86 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 86 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 86 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 86 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for OR in state 86 resolved as shift
WARNING: shift/reduce conflict for AND in state 86 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 88 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 88 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 88 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 88 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 88 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 88 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 88 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 88 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for OR in state 88 resolved as shift
WARNING: shift/reduce conflict for AND in state 88 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 93 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 93 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 93 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 93 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 93 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 93 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 93 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 93 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 93 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 93 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 93 resolved as shift
WARNING: shift/reduce conflict for OR in state 93 resolved as shift
WARNING: shift/reduce conflict for AND in state 93 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 94 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 94 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 94 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 94 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 94 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 94 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 94 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for OR in state 94 resolved as shift
WARNING: shift/reduce conflict for AND in state 94 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 95 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 95 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 95 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 95 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 95 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 95 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 95 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 95 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for OR in state 95 resolved as shift
WARNING: shift/reduce conflict for AND in state 95 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 96 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 96 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 96 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 96 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 96 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 96 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 96 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 96 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for OR in state 96 resolved as shift
WARNING: shift/reduce conflict for AND in state 96 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 97 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 97 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 97 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 97 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 97 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for OR in state 97 resolved as shift
WARNING: shift/reduce conflict for AND in state 97 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 98 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 98 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 98 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 98 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 98 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for OR in state 98 resolved as shift
WARNING: shift/reduce conflict for AND in state 98 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 99 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 99 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 99 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 99 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 99 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 99 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for OR in state 99 resolved as shift
WARNING: shift/reduce conflict for AND in state 99 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 100 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 100 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 100 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 100 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 100 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for OR in state 100 resolved as shift
WARNING: shift/reduce conflict for AND in state 100 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 101 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 101 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 101 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 101 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 101 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 101 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for OR in state 101 resolved as shift
WARNING: shift/reduce conflict for AND in state 101 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 102 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 102 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 102 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 102 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for OR in state 102 resolved as shift
WARNING: shift/reduce conflict for AND in state 102 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 103 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 103 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 103 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 103 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for OR in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 103 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 104 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 104 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 104 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 104 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 104 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for OR in state 104 resolved as shift
WARNING: shift/reduce conflict for AND in state 104 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 138 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 138 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 138 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 138 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 138 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 138 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 138 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 138 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 138 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 138 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 138 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 138 resolved as shift
WARNING: shift/reduce conflict for OR in state 138 resolved as shift
WARNING: shift/reduce conflict for AND in state 138 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 151 resolved as shift
